// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: positioning.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_positioning_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_positioning_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_positioning_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_positioning_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_positioning_2eproto;
namespace proto {
namespace positioning {
class BluetoothMeasurement;
class BluetoothMeasurementDefaultTypeInternal;
extern BluetoothMeasurementDefaultTypeInternal _BluetoothMeasurement_default_instance_;
class CameraIntrinsics;
class CameraIntrinsicsDefaultTypeInternal;
extern CameraIntrinsicsDefaultTypeInternal _CameraIntrinsics_default_instance_;
class CartesianLocation;
class CartesianLocationDefaultTypeInternal;
extern CartesianLocationDefaultTypeInternal _CartesianLocation_default_instance_;
class CartesianPose;
class CartesianPoseDefaultTypeInternal;
extern CartesianPoseDefaultTypeInternal _CartesianPose_default_instance_;
class CylinderSearchSubset;
class CylinderSearchSubsetDefaultTypeInternal;
extern CylinderSearchSubsetDefaultTypeInternal _CylinderSearchSubset_default_instance_;
class GeoLocation3D;
class GeoLocation3DDefaultTypeInternal;
extern GeoLocation3DDefaultTypeInternal _GeoLocation3D_default_instance_;
class GeoPose;
class GeoPoseDefaultTypeInternal;
extern GeoPoseDefaultTypeInternal _GeoPose_default_instance_;
class PolygonSearchSubset;
class PolygonSearchSubsetDefaultTypeInternal;
extern PolygonSearchSubsetDefaultTypeInternal _PolygonSearchSubset_default_instance_;
class PolygonSearchSubset_GeoLocation2D;
class PolygonSearchSubset_GeoLocation2DDefaultTypeInternal;
extern PolygonSearchSubset_GeoLocation2DDefaultTypeInternal _PolygonSearchSubset_GeoLocation2D_default_instance_;
class PoseEstimate;
class PoseEstimateDefaultTypeInternal;
extern PoseEstimateDefaultTypeInternal _PoseEstimate_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class Query;
class QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class VisualMeasurement;
class VisualMeasurementDefaultTypeInternal;
extern VisualMeasurementDefaultTypeInternal _VisualMeasurement_default_instance_;
class WifiNetworkMeasurement;
class WifiNetworkMeasurementDefaultTypeInternal;
extern WifiNetworkMeasurementDefaultTypeInternal _WifiNetworkMeasurement_default_instance_;
}  // namespace positioning
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::positioning::BluetoothMeasurement* Arena::CreateMaybeMessage<::proto::positioning::BluetoothMeasurement>(Arena*);
template<> ::proto::positioning::CameraIntrinsics* Arena::CreateMaybeMessage<::proto::positioning::CameraIntrinsics>(Arena*);
template<> ::proto::positioning::CartesianLocation* Arena::CreateMaybeMessage<::proto::positioning::CartesianLocation>(Arena*);
template<> ::proto::positioning::CartesianPose* Arena::CreateMaybeMessage<::proto::positioning::CartesianPose>(Arena*);
template<> ::proto::positioning::CylinderSearchSubset* Arena::CreateMaybeMessage<::proto::positioning::CylinderSearchSubset>(Arena*);
template<> ::proto::positioning::GeoLocation3D* Arena::CreateMaybeMessage<::proto::positioning::GeoLocation3D>(Arena*);
template<> ::proto::positioning::GeoPose* Arena::CreateMaybeMessage<::proto::positioning::GeoPose>(Arena*);
template<> ::proto::positioning::PolygonSearchSubset* Arena::CreateMaybeMessage<::proto::positioning::PolygonSearchSubset>(Arena*);
template<> ::proto::positioning::PolygonSearchSubset_GeoLocation2D* Arena::CreateMaybeMessage<::proto::positioning::PolygonSearchSubset_GeoLocation2D>(Arena*);
template<> ::proto::positioning::PoseEstimate* Arena::CreateMaybeMessage<::proto::positioning::PoseEstimate>(Arena*);
template<> ::proto::positioning::Quaternion* Arena::CreateMaybeMessage<::proto::positioning::Quaternion>(Arena*);
template<> ::proto::positioning::Query* Arena::CreateMaybeMessage<::proto::positioning::Query>(Arena*);
template<> ::proto::positioning::Response* Arena::CreateMaybeMessage<::proto::positioning::Response>(Arena*);
template<> ::proto::positioning::VisualMeasurement* Arena::CreateMaybeMessage<::proto::positioning::VisualMeasurement>(Arena*);
template<> ::proto::positioning::WifiNetworkMeasurement* Arena::CreateMaybeMessage<::proto::positioning::WifiNetworkMeasurement>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {
namespace positioning {

// ===================================================================

class CartesianLocation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.positioning.CartesianLocation) */ {
 public:
  inline CartesianLocation() : CartesianLocation(nullptr) {}
  virtual ~CartesianLocation();

  CartesianLocation(const CartesianLocation& from);
  CartesianLocation(CartesianLocation&& from) noexcept
    : CartesianLocation() {
    *this = ::std::move(from);
  }

  inline CartesianLocation& operator=(const CartesianLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CartesianLocation& operator=(CartesianLocation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CartesianLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CartesianLocation* internal_default_instance() {
    return reinterpret_cast<const CartesianLocation*>(
               &_CartesianLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CartesianLocation& a, CartesianLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(CartesianLocation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CartesianLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CartesianLocation* New() const final {
    return CreateMaybeMessage<CartesianLocation>(nullptr);
  }

  CartesianLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CartesianLocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CartesianLocation& from);
  void MergeFrom(const CartesianLocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CartesianLocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.positioning.CartesianLocation";
  }
  protected:
  explicit CartesianLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_positioning_2eproto);
    return ::descriptor_table_positioning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:proto.positioning.CartesianLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_positioning_2eproto;
};
// -------------------------------------------------------------------

class GeoLocation3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.positioning.GeoLocation3D) */ {
 public:
  inline GeoLocation3D() : GeoLocation3D(nullptr) {}
  virtual ~GeoLocation3D();

  GeoLocation3D(const GeoLocation3D& from);
  GeoLocation3D(GeoLocation3D&& from) noexcept
    : GeoLocation3D() {
    *this = ::std::move(from);
  }

  inline GeoLocation3D& operator=(const GeoLocation3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoLocation3D& operator=(GeoLocation3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeoLocation3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoLocation3D* internal_default_instance() {
    return reinterpret_cast<const GeoLocation3D*>(
               &_GeoLocation3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GeoLocation3D& a, GeoLocation3D& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoLocation3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeoLocation3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeoLocation3D* New() const final {
    return CreateMaybeMessage<GeoLocation3D>(nullptr);
  }

  GeoLocation3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeoLocation3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeoLocation3D& from);
  void MergeFrom(const GeoLocation3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoLocation3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.positioning.GeoLocation3D";
  }
  protected:
  explicit GeoLocation3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_positioning_2eproto);
    return ::descriptor_table_positioning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double longitude = 1;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:proto.positioning.GeoLocation3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double longitude_;
  double latitude_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_positioning_2eproto;
};
// -------------------------------------------------------------------

class Quaternion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.positioning.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {}
  virtual ~Quaternion();

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quaternion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quaternion* New() const final {
    return CreateMaybeMessage<Quaternion>(nullptr);
  }

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.positioning.Quaternion";
  }
  protected:
  explicit Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_positioning_2eproto);
    return ::descriptor_table_positioning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float w = 4;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:proto.positioning.Quaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  float w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_positioning_2eproto;
};
// -------------------------------------------------------------------

class CartesianPose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.positioning.CartesianPose) */ {
 public:
  inline CartesianPose() : CartesianPose(nullptr) {}
  virtual ~CartesianPose();

  CartesianPose(const CartesianPose& from);
  CartesianPose(CartesianPose&& from) noexcept
    : CartesianPose() {
    *this = ::std::move(from);
  }

  inline CartesianPose& operator=(const CartesianPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline CartesianPose& operator=(CartesianPose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CartesianPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CartesianPose* internal_default_instance() {
    return reinterpret_cast<const CartesianPose*>(
               &_CartesianPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CartesianPose& a, CartesianPose& b) {
    a.Swap(&b);
  }
  inline void Swap(CartesianPose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CartesianPose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CartesianPose* New() const final {
    return CreateMaybeMessage<CartesianPose>(nullptr);
  }

  CartesianPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CartesianPose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CartesianPose& from);
  void MergeFrom(const CartesianPose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CartesianPose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.positioning.CartesianPose";
  }
  protected:
  explicit CartesianPose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_positioning_2eproto);
    return ::descriptor_table_positioning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kOrientationFieldNumber = 2,
  };
  // .proto.positioning.CartesianLocation location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::proto::positioning::CartesianLocation& location() const;
  ::proto::positioning::CartesianLocation* release_location();
  ::proto::positioning::CartesianLocation* mutable_location();
  void set_allocated_location(::proto::positioning::CartesianLocation* location);
  private:
  const ::proto::positioning::CartesianLocation& _internal_location() const;
  ::proto::positioning::CartesianLocation* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::proto::positioning::CartesianLocation* location);
  ::proto::positioning::CartesianLocation* unsafe_arena_release_location();

  // .proto.positioning.Quaternion orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::proto::positioning::Quaternion& orientation() const;
  ::proto::positioning::Quaternion* release_orientation();
  ::proto::positioning::Quaternion* mutable_orientation();
  void set_allocated_orientation(::proto::positioning::Quaternion* orientation);
  private:
  const ::proto::positioning::Quaternion& _internal_orientation() const;
  ::proto::positioning::Quaternion* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::proto::positioning::Quaternion* orientation);
  ::proto::positioning::Quaternion* unsafe_arena_release_orientation();

  // @@protoc_insertion_point(class_scope:proto.positioning.CartesianPose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::positioning::CartesianLocation* location_;
  ::proto::positioning::Quaternion* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_positioning_2eproto;
};
// -------------------------------------------------------------------

class GeoPose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.positioning.GeoPose) */ {
 public:
  inline GeoPose() : GeoPose(nullptr) {}
  virtual ~GeoPose();

  GeoPose(const GeoPose& from);
  GeoPose(GeoPose&& from) noexcept
    : GeoPose() {
    *this = ::std::move(from);
  }

  inline GeoPose& operator=(const GeoPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoPose& operator=(GeoPose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeoPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoPose* internal_default_instance() {
    return reinterpret_cast<const GeoPose*>(
               &_GeoPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GeoPose& a, GeoPose& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoPose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeoPose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeoPose* New() const final {
    return CreateMaybeMessage<GeoPose>(nullptr);
  }

  GeoPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeoPose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeoPose& from);
  void MergeFrom(const GeoPose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoPose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.positioning.GeoPose";
  }
  protected:
  explicit GeoPose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_positioning_2eproto);
    return ::descriptor_table_positioning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kOrientationFieldNumber = 2,
  };
  // .proto.positioning.GeoLocation3D location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::proto::positioning::GeoLocation3D& location() const;
  ::proto::positioning::GeoLocation3D* release_location();
  ::proto::positioning::GeoLocation3D* mutable_location();
  void set_allocated_location(::proto::positioning::GeoLocation3D* location);
  private:
  const ::proto::positioning::GeoLocation3D& _internal_location() const;
  ::proto::positioning::GeoLocation3D* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::proto::positioning::GeoLocation3D* location);
  ::proto::positioning::GeoLocation3D* unsafe_arena_release_location();

  // .proto.positioning.Quaternion orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::proto::positioning::Quaternion& orientation() const;
  ::proto::positioning::Quaternion* release_orientation();
  ::proto::positioning::Quaternion* mutable_orientation();
  void set_allocated_orientation(::proto::positioning::Quaternion* orientation);
  private:
  const ::proto::positioning::Quaternion& _internal_orientation() const;
  ::proto::positioning::Quaternion* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::proto::positioning::Quaternion* orientation);
  ::proto::positioning::Quaternion* unsafe_arena_release_orientation();

  // @@protoc_insertion_point(class_scope:proto.positioning.GeoPose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::positioning::GeoLocation3D* location_;
  ::proto::positioning::Quaternion* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_positioning_2eproto;
};
// -------------------------------------------------------------------

class PolygonSearchSubset_GeoLocation2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.positioning.PolygonSearchSubset.GeoLocation2D) */ {
 public:
  inline PolygonSearchSubset_GeoLocation2D() : PolygonSearchSubset_GeoLocation2D(nullptr) {}
  virtual ~PolygonSearchSubset_GeoLocation2D();

  PolygonSearchSubset_GeoLocation2D(const PolygonSearchSubset_GeoLocation2D& from);
  PolygonSearchSubset_GeoLocation2D(PolygonSearchSubset_GeoLocation2D&& from) noexcept
    : PolygonSearchSubset_GeoLocation2D() {
    *this = ::std::move(from);
  }

  inline PolygonSearchSubset_GeoLocation2D& operator=(const PolygonSearchSubset_GeoLocation2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolygonSearchSubset_GeoLocation2D& operator=(PolygonSearchSubset_GeoLocation2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PolygonSearchSubset_GeoLocation2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolygonSearchSubset_GeoLocation2D* internal_default_instance() {
    return reinterpret_cast<const PolygonSearchSubset_GeoLocation2D*>(
               &_PolygonSearchSubset_GeoLocation2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PolygonSearchSubset_GeoLocation2D& a, PolygonSearchSubset_GeoLocation2D& b) {
    a.Swap(&b);
  }
  inline void Swap(PolygonSearchSubset_GeoLocation2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolygonSearchSubset_GeoLocation2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PolygonSearchSubset_GeoLocation2D* New() const final {
    return CreateMaybeMessage<PolygonSearchSubset_GeoLocation2D>(nullptr);
  }

  PolygonSearchSubset_GeoLocation2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PolygonSearchSubset_GeoLocation2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PolygonSearchSubset_GeoLocation2D& from);
  void MergeFrom(const PolygonSearchSubset_GeoLocation2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolygonSearchSubset_GeoLocation2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.positioning.PolygonSearchSubset.GeoLocation2D";
  }
  protected:
  explicit PolygonSearchSubset_GeoLocation2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_positioning_2eproto);
    return ::descriptor_table_positioning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
  };
  // double longitude = 1;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.positioning.PolygonSearchSubset.GeoLocation2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double longitude_;
  double latitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_positioning_2eproto;
};
// -------------------------------------------------------------------

class PolygonSearchSubset PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.positioning.PolygonSearchSubset) */ {
 public:
  inline PolygonSearchSubset() : PolygonSearchSubset(nullptr) {}
  virtual ~PolygonSearchSubset();

  PolygonSearchSubset(const PolygonSearchSubset& from);
  PolygonSearchSubset(PolygonSearchSubset&& from) noexcept
    : PolygonSearchSubset() {
    *this = ::std::move(from);
  }

  inline PolygonSearchSubset& operator=(const PolygonSearchSubset& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolygonSearchSubset& operator=(PolygonSearchSubset&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PolygonSearchSubset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolygonSearchSubset* internal_default_instance() {
    return reinterpret_cast<const PolygonSearchSubset*>(
               &_PolygonSearchSubset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PolygonSearchSubset& a, PolygonSearchSubset& b) {
    a.Swap(&b);
  }
  inline void Swap(PolygonSearchSubset* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolygonSearchSubset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PolygonSearchSubset* New() const final {
    return CreateMaybeMessage<PolygonSearchSubset>(nullptr);
  }

  PolygonSearchSubset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PolygonSearchSubset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PolygonSearchSubset& from);
  void MergeFrom(const PolygonSearchSubset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolygonSearchSubset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.positioning.PolygonSearchSubset";
  }
  protected:
  explicit PolygonSearchSubset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_positioning_2eproto);
    return ::descriptor_table_positioning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PolygonSearchSubset_GeoLocation2D GeoLocation2D;

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
    kZFromFieldNumber = 2,
    kZToFieldNumber = 3,
  };
  // repeated .proto.positioning.PolygonSearchSubset.GeoLocation2D points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::proto::positioning::PolygonSearchSubset_GeoLocation2D* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::positioning::PolygonSearchSubset_GeoLocation2D >*
      mutable_points();
  private:
  const ::proto::positioning::PolygonSearchSubset_GeoLocation2D& _internal_points(int index) const;
  ::proto::positioning::PolygonSearchSubset_GeoLocation2D* _internal_add_points();
  public:
  const ::proto::positioning::PolygonSearchSubset_GeoLocation2D& points(int index) const;
  ::proto::positioning::PolygonSearchSubset_GeoLocation2D* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::positioning::PolygonSearchSubset_GeoLocation2D >&
      points() const;

  // .google.protobuf.FloatValue z_from = 2;
  bool has_z_from() const;
  private:
  bool _internal_has_z_from() const;
  public:
  void clear_z_from();
  const PROTOBUF_NAMESPACE_ID::FloatValue& z_from() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_z_from();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_z_from();
  void set_allocated_z_from(PROTOBUF_NAMESPACE_ID::FloatValue* z_from);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_z_from() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_z_from();
  public:
  void unsafe_arena_set_allocated_z_from(
      PROTOBUF_NAMESPACE_ID::FloatValue* z_from);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_z_from();

  // .google.protobuf.FloatValue z_to = 3;
  bool has_z_to() const;
  private:
  bool _internal_has_z_to() const;
  public:
  void clear_z_to();
  const PROTOBUF_NAMESPACE_ID::FloatValue& z_to() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_z_to();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_z_to();
  void set_allocated_z_to(PROTOBUF_NAMESPACE_ID::FloatValue* z_to);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_z_to() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_z_to();
  public:
  void unsafe_arena_set_allocated_z_to(
      PROTOBUF_NAMESPACE_ID::FloatValue* z_to);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_z_to();

  // @@protoc_insertion_point(class_scope:proto.positioning.PolygonSearchSubset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::positioning::PolygonSearchSubset_GeoLocation2D > points_;
  PROTOBUF_NAMESPACE_ID::FloatValue* z_from_;
  PROTOBUF_NAMESPACE_ID::FloatValue* z_to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_positioning_2eproto;
};
// -------------------------------------------------------------------

class CylinderSearchSubset PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.positioning.CylinderSearchSubset) */ {
 public:
  inline CylinderSearchSubset() : CylinderSearchSubset(nullptr) {}
  virtual ~CylinderSearchSubset();

  CylinderSearchSubset(const CylinderSearchSubset& from);
  CylinderSearchSubset(CylinderSearchSubset&& from) noexcept
    : CylinderSearchSubset() {
    *this = ::std::move(from);
  }

  inline CylinderSearchSubset& operator=(const CylinderSearchSubset& from) {
    CopyFrom(from);
    return *this;
  }
  inline CylinderSearchSubset& operator=(CylinderSearchSubset&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CylinderSearchSubset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CylinderSearchSubset* internal_default_instance() {
    return reinterpret_cast<const CylinderSearchSubset*>(
               &_CylinderSearchSubset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CylinderSearchSubset& a, CylinderSearchSubset& b) {
    a.Swap(&b);
  }
  inline void Swap(CylinderSearchSubset* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CylinderSearchSubset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CylinderSearchSubset* New() const final {
    return CreateMaybeMessage<CylinderSearchSubset>(nullptr);
  }

  CylinderSearchSubset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CylinderSearchSubset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CylinderSearchSubset& from);
  void MergeFrom(const CylinderSearchSubset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CylinderSearchSubset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.positioning.CylinderSearchSubset";
  }
  protected:
  explicit CylinderSearchSubset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_positioning_2eproto);
    return ::descriptor_table_positioning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
    kZOffsetFieldNumber = 3,
    kRadiusFieldNumber = 2,
  };
  // .proto.positioning.GeoLocation3D center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::proto::positioning::GeoLocation3D& center() const;
  ::proto::positioning::GeoLocation3D* release_center();
  ::proto::positioning::GeoLocation3D* mutable_center();
  void set_allocated_center(::proto::positioning::GeoLocation3D* center);
  private:
  const ::proto::positioning::GeoLocation3D& _internal_center() const;
  ::proto::positioning::GeoLocation3D* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::proto::positioning::GeoLocation3D* center);
  ::proto::positioning::GeoLocation3D* unsafe_arena_release_center();

  // .google.protobuf.FloatValue z_offset = 3;
  bool has_z_offset() const;
  private:
  bool _internal_has_z_offset() const;
  public:
  void clear_z_offset();
  const PROTOBUF_NAMESPACE_ID::FloatValue& z_offset() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_z_offset();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_z_offset();
  void set_allocated_z_offset(PROTOBUF_NAMESPACE_ID::FloatValue* z_offset);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_z_offset() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_z_offset();
  public:
  void unsafe_arena_set_allocated_z_offset(
      PROTOBUF_NAMESPACE_ID::FloatValue* z_offset);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_z_offset();

  // float radius = 2;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // @@protoc_insertion_point(class_scope:proto.positioning.CylinderSearchSubset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::positioning::GeoLocation3D* center_;
  PROTOBUF_NAMESPACE_ID::FloatValue* z_offset_;
  float radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_positioning_2eproto;
};
// -------------------------------------------------------------------

class WifiNetworkMeasurement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.positioning.WifiNetworkMeasurement) */ {
 public:
  inline WifiNetworkMeasurement() : WifiNetworkMeasurement(nullptr) {}
  virtual ~WifiNetworkMeasurement();

  WifiNetworkMeasurement(const WifiNetworkMeasurement& from);
  WifiNetworkMeasurement(WifiNetworkMeasurement&& from) noexcept
    : WifiNetworkMeasurement() {
    *this = ::std::move(from);
  }

  inline WifiNetworkMeasurement& operator=(const WifiNetworkMeasurement& from) {
    CopyFrom(from);
    return *this;
  }
  inline WifiNetworkMeasurement& operator=(WifiNetworkMeasurement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WifiNetworkMeasurement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WifiNetworkMeasurement* internal_default_instance() {
    return reinterpret_cast<const WifiNetworkMeasurement*>(
               &_WifiNetworkMeasurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(WifiNetworkMeasurement& a, WifiNetworkMeasurement& b) {
    a.Swap(&b);
  }
  inline void Swap(WifiNetworkMeasurement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WifiNetworkMeasurement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WifiNetworkMeasurement* New() const final {
    return CreateMaybeMessage<WifiNetworkMeasurement>(nullptr);
  }

  WifiNetworkMeasurement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WifiNetworkMeasurement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WifiNetworkMeasurement& from);
  void MergeFrom(const WifiNetworkMeasurement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WifiNetworkMeasurement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.positioning.WifiNetworkMeasurement";
  }
  protected:
  explicit WifiNetworkMeasurement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_positioning_2eproto);
    return ::descriptor_table_positioning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacAddressFieldNumber = 1,
    kSsidFieldNumber = 4,
    kFrequencyMhzFieldNumber = 2,
    kLevelDbFieldNumber = 3,
  };
  // string mac_address = 1;
  void clear_mac_address();
  const std::string& mac_address() const;
  void set_mac_address(const std::string& value);
  void set_mac_address(std::string&& value);
  void set_mac_address(const char* value);
  void set_mac_address(const char* value, size_t size);
  std::string* mutable_mac_address();
  std::string* release_mac_address();
  void set_allocated_mac_address(std::string* mac_address);
  private:
  const std::string& _internal_mac_address() const;
  void _internal_set_mac_address(const std::string& value);
  std::string* _internal_mutable_mac_address();
  public:

  // string ssid = 4;
  void clear_ssid();
  const std::string& ssid() const;
  void set_ssid(const std::string& value);
  void set_ssid(std::string&& value);
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  std::string* mutable_ssid();
  std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // int32 frequency_mhz = 2;
  void clear_frequency_mhz();
  ::PROTOBUF_NAMESPACE_ID::int32 frequency_mhz() const;
  void set_frequency_mhz(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frequency_mhz() const;
  void _internal_set_frequency_mhz(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level_db = 3;
  void clear_level_db();
  ::PROTOBUF_NAMESPACE_ID::int32 level_db() const;
  void set_level_db(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level_db() const;
  void _internal_set_level_db(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.positioning.WifiNetworkMeasurement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::int32 frequency_mhz_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_db_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_positioning_2eproto;
};
// -------------------------------------------------------------------

class BluetoothMeasurement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.positioning.BluetoothMeasurement) */ {
 public:
  inline BluetoothMeasurement() : BluetoothMeasurement(nullptr) {}
  virtual ~BluetoothMeasurement();

  BluetoothMeasurement(const BluetoothMeasurement& from);
  BluetoothMeasurement(BluetoothMeasurement&& from) noexcept
    : BluetoothMeasurement() {
    *this = ::std::move(from);
  }

  inline BluetoothMeasurement& operator=(const BluetoothMeasurement& from) {
    CopyFrom(from);
    return *this;
  }
  inline BluetoothMeasurement& operator=(BluetoothMeasurement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BluetoothMeasurement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BluetoothMeasurement* internal_default_instance() {
    return reinterpret_cast<const BluetoothMeasurement*>(
               &_BluetoothMeasurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BluetoothMeasurement& a, BluetoothMeasurement& b) {
    a.Swap(&b);
  }
  inline void Swap(BluetoothMeasurement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BluetoothMeasurement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BluetoothMeasurement* New() const final {
    return CreateMaybeMessage<BluetoothMeasurement>(nullptr);
  }

  BluetoothMeasurement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothMeasurement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BluetoothMeasurement& from);
  void MergeFrom(const BluetoothMeasurement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BluetoothMeasurement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.positioning.BluetoothMeasurement";
  }
  protected:
  explicit BluetoothMeasurement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_positioning_2eproto);
    return ::descriptor_table_positioning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacAddressFieldNumber = 1,
    kLevelDbFieldNumber = 2,
  };
  // string mac_address = 1;
  void clear_mac_address();
  const std::string& mac_address() const;
  void set_mac_address(const std::string& value);
  void set_mac_address(std::string&& value);
  void set_mac_address(const char* value);
  void set_mac_address(const char* value, size_t size);
  std::string* mutable_mac_address();
  std::string* release_mac_address();
  void set_allocated_mac_address(std::string* mac_address);
  private:
  const std::string& _internal_mac_address() const;
  void _internal_set_mac_address(const std::string& value);
  std::string* _internal_mutable_mac_address();
  public:

  // int32 level_db = 2;
  void clear_level_db();
  ::PROTOBUF_NAMESPACE_ID::int32 level_db() const;
  void set_level_db(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level_db() const;
  void _internal_set_level_db(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.positioning.BluetoothMeasurement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_address_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_db_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_positioning_2eproto;
};
// -------------------------------------------------------------------

class CameraIntrinsics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.positioning.CameraIntrinsics) */ {
 public:
  inline CameraIntrinsics() : CameraIntrinsics(nullptr) {}
  virtual ~CameraIntrinsics();

  CameraIntrinsics(const CameraIntrinsics& from);
  CameraIntrinsics(CameraIntrinsics&& from) noexcept
    : CameraIntrinsics() {
    *this = ::std::move(from);
  }

  inline CameraIntrinsics& operator=(const CameraIntrinsics& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraIntrinsics& operator=(CameraIntrinsics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraIntrinsics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraIntrinsics* internal_default_instance() {
    return reinterpret_cast<const CameraIntrinsics*>(
               &_CameraIntrinsics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CameraIntrinsics& a, CameraIntrinsics& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraIntrinsics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraIntrinsics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraIntrinsics* New() const final {
    return CreateMaybeMessage<CameraIntrinsics>(nullptr);
  }

  CameraIntrinsics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraIntrinsics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraIntrinsics& from);
  void MergeFrom(const CameraIntrinsics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraIntrinsics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.positioning.CameraIntrinsics";
  }
  protected:
  explicit CameraIntrinsics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_positioning_2eproto);
    return ::descriptor_table_positioning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFxFieldNumber = 1,
    kFyFieldNumber = 2,
    kPxFieldNumber = 3,
    kPyFieldNumber = 4,
  };
  // float fx = 1;
  void clear_fx();
  float fx() const;
  void set_fx(float value);
  private:
  float _internal_fx() const;
  void _internal_set_fx(float value);
  public:

  // float fy = 2;
  void clear_fy();
  float fy() const;
  void set_fy(float value);
  private:
  float _internal_fy() const;
  void _internal_set_fy(float value);
  public:

  // float px = 3;
  void clear_px();
  float px() const;
  void set_px(float value);
  private:
  float _internal_px() const;
  void _internal_set_px(float value);
  public:

  // float py = 4;
  void clear_py();
  float py() const;
  void set_py(float value);
  private:
  float _internal_py() const;
  void _internal_set_py(float value);
  public:

  // @@protoc_insertion_point(class_scope:proto.positioning.CameraIntrinsics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float fx_;
  float fy_;
  float px_;
  float py_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_positioning_2eproto;
};
// -------------------------------------------------------------------

class VisualMeasurement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.positioning.VisualMeasurement) */ {
 public:
  inline VisualMeasurement() : VisualMeasurement(nullptr) {}
  virtual ~VisualMeasurement();

  VisualMeasurement(const VisualMeasurement& from);
  VisualMeasurement(VisualMeasurement&& from) noexcept
    : VisualMeasurement() {
    *this = ::std::move(from);
  }

  inline VisualMeasurement& operator=(const VisualMeasurement& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisualMeasurement& operator=(VisualMeasurement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VisualMeasurement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisualMeasurement* internal_default_instance() {
    return reinterpret_cast<const VisualMeasurement*>(
               &_VisualMeasurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(VisualMeasurement& a, VisualMeasurement& b) {
    a.Swap(&b);
  }
  inline void Swap(VisualMeasurement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisualMeasurement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VisualMeasurement* New() const final {
    return CreateMaybeMessage<VisualMeasurement>(nullptr);
  }

  VisualMeasurement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VisualMeasurement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VisualMeasurement& from);
  void MergeFrom(const VisualMeasurement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisualMeasurement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.positioning.VisualMeasurement";
  }
  protected:
  explicit VisualMeasurement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_positioning_2eproto);
    return ::descriptor_table_positioning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPictureFieldNumber = 1,
    kCameraIntrinsicsFieldNumber = 2,
    kRelativeCameraPoseFieldNumber = 3,
  };
  // bytes picture = 1;
  void clear_picture();
  const std::string& picture() const;
  void set_picture(const std::string& value);
  void set_picture(std::string&& value);
  void set_picture(const char* value);
  void set_picture(const void* value, size_t size);
  std::string* mutable_picture();
  std::string* release_picture();
  void set_allocated_picture(std::string* picture);
  private:
  const std::string& _internal_picture() const;
  void _internal_set_picture(const std::string& value);
  std::string* _internal_mutable_picture();
  public:

  // .proto.positioning.CameraIntrinsics camera_intrinsics = 2;
  bool has_camera_intrinsics() const;
  private:
  bool _internal_has_camera_intrinsics() const;
  public:
  void clear_camera_intrinsics();
  const ::proto::positioning::CameraIntrinsics& camera_intrinsics() const;
  ::proto::positioning::CameraIntrinsics* release_camera_intrinsics();
  ::proto::positioning::CameraIntrinsics* mutable_camera_intrinsics();
  void set_allocated_camera_intrinsics(::proto::positioning::CameraIntrinsics* camera_intrinsics);
  private:
  const ::proto::positioning::CameraIntrinsics& _internal_camera_intrinsics() const;
  ::proto::positioning::CameraIntrinsics* _internal_mutable_camera_intrinsics();
  public:
  void unsafe_arena_set_allocated_camera_intrinsics(
      ::proto::positioning::CameraIntrinsics* camera_intrinsics);
  ::proto::positioning::CameraIntrinsics* unsafe_arena_release_camera_intrinsics();

  // .proto.positioning.CartesianPose relative_camera_pose = 3;
  bool has_relative_camera_pose() const;
  private:
  bool _internal_has_relative_camera_pose() const;
  public:
  void clear_relative_camera_pose();
  const ::proto::positioning::CartesianPose& relative_camera_pose() const;
  ::proto::positioning::CartesianPose* release_relative_camera_pose();
  ::proto::positioning::CartesianPose* mutable_relative_camera_pose();
  void set_allocated_relative_camera_pose(::proto::positioning::CartesianPose* relative_camera_pose);
  private:
  const ::proto::positioning::CartesianPose& _internal_relative_camera_pose() const;
  ::proto::positioning::CartesianPose* _internal_mutable_relative_camera_pose();
  public:
  void unsafe_arena_set_allocated_relative_camera_pose(
      ::proto::positioning::CartesianPose* relative_camera_pose);
  ::proto::positioning::CartesianPose* unsafe_arena_release_relative_camera_pose();

  // @@protoc_insertion_point(class_scope:proto.positioning.VisualMeasurement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr picture_;
  ::proto::positioning::CameraIntrinsics* camera_intrinsics_;
  ::proto::positioning::CartesianPose* relative_camera_pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_positioning_2eproto;
};
// -------------------------------------------------------------------

class Query PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.positioning.Query) */ {
 public:
  inline Query() : Query(nullptr) {}
  virtual ~Query();

  Query(const Query& from);
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query& operator=(Query&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Query& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }
  inline void Swap(Query* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Query* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Query* New() const final {
    return CreateMaybeMessage<Query>(nullptr);
  }

  Query* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Query>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.positioning.Query";
  }
  protected:
  explicit Query(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_positioning_2eproto);
    return ::descriptor_table_positioning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWifiMeasurementsFieldNumber = 2,
    kBluetoothMeasurementsFieldNumber = 3,
    kVisualMeasurementsFieldNumber = 4,
    kSearchSubsetsFieldNumber = 5,
    kQueryIdFieldNumber = 1,
  };
  // repeated .proto.positioning.WifiNetworkMeasurement wifi_measurements = 2;
  int wifi_measurements_size() const;
  private:
  int _internal_wifi_measurements_size() const;
  public:
  void clear_wifi_measurements();
  ::proto::positioning::WifiNetworkMeasurement* mutable_wifi_measurements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::positioning::WifiNetworkMeasurement >*
      mutable_wifi_measurements();
  private:
  const ::proto::positioning::WifiNetworkMeasurement& _internal_wifi_measurements(int index) const;
  ::proto::positioning::WifiNetworkMeasurement* _internal_add_wifi_measurements();
  public:
  const ::proto::positioning::WifiNetworkMeasurement& wifi_measurements(int index) const;
  ::proto::positioning::WifiNetworkMeasurement* add_wifi_measurements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::positioning::WifiNetworkMeasurement >&
      wifi_measurements() const;

  // repeated .proto.positioning.BluetoothMeasurement bluetooth_measurements = 3;
  int bluetooth_measurements_size() const;
  private:
  int _internal_bluetooth_measurements_size() const;
  public:
  void clear_bluetooth_measurements();
  ::proto::positioning::BluetoothMeasurement* mutable_bluetooth_measurements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::positioning::BluetoothMeasurement >*
      mutable_bluetooth_measurements();
  private:
  const ::proto::positioning::BluetoothMeasurement& _internal_bluetooth_measurements(int index) const;
  ::proto::positioning::BluetoothMeasurement* _internal_add_bluetooth_measurements();
  public:
  const ::proto::positioning::BluetoothMeasurement& bluetooth_measurements(int index) const;
  ::proto::positioning::BluetoothMeasurement* add_bluetooth_measurements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::positioning::BluetoothMeasurement >&
      bluetooth_measurements() const;

  // repeated .proto.positioning.VisualMeasurement visual_measurements = 4;
  int visual_measurements_size() const;
  private:
  int _internal_visual_measurements_size() const;
  public:
  void clear_visual_measurements();
  ::proto::positioning::VisualMeasurement* mutable_visual_measurements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::positioning::VisualMeasurement >*
      mutable_visual_measurements();
  private:
  const ::proto::positioning::VisualMeasurement& _internal_visual_measurements(int index) const;
  ::proto::positioning::VisualMeasurement* _internal_add_visual_measurements();
  public:
  const ::proto::positioning::VisualMeasurement& visual_measurements(int index) const;
  ::proto::positioning::VisualMeasurement* add_visual_measurements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::positioning::VisualMeasurement >&
      visual_measurements() const;

  // repeated .google.protobuf.Any search_subsets = 5;
  int search_subsets_size() const;
  private:
  int _internal_search_subsets_size() const;
  public:
  void clear_search_subsets();
  PROTOBUF_NAMESPACE_ID::Any* mutable_search_subsets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_search_subsets();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_search_subsets(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_search_subsets();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& search_subsets(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_search_subsets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      search_subsets() const;

  // string query_id = 1;
  void clear_query_id();
  const std::string& query_id() const;
  void set_query_id(const std::string& value);
  void set_query_id(std::string&& value);
  void set_query_id(const char* value);
  void set_query_id(const char* value, size_t size);
  std::string* mutable_query_id();
  std::string* release_query_id();
  void set_allocated_query_id(std::string* query_id);
  private:
  const std::string& _internal_query_id() const;
  void _internal_set_query_id(const std::string& value);
  std::string* _internal_mutable_query_id();
  public:

  // @@protoc_insertion_point(class_scope:proto.positioning.Query)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::positioning::WifiNetworkMeasurement > wifi_measurements_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::positioning::BluetoothMeasurement > bluetooth_measurements_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::positioning::VisualMeasurement > visual_measurements_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > search_subsets_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_positioning_2eproto;
};
// -------------------------------------------------------------------

class PoseEstimate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.positioning.PoseEstimate) */ {
 public:
  inline PoseEstimate() : PoseEstimate(nullptr) {}
  virtual ~PoseEstimate();

  PoseEstimate(const PoseEstimate& from);
  PoseEstimate(PoseEstimate&& from) noexcept
    : PoseEstimate() {
    *this = ::std::move(from);
  }

  inline PoseEstimate& operator=(const PoseEstimate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseEstimate& operator=(PoseEstimate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoseEstimate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoseEstimate* internal_default_instance() {
    return reinterpret_cast<const PoseEstimate*>(
               &_PoseEstimate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PoseEstimate& a, PoseEstimate& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseEstimate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseEstimate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoseEstimate* New() const final {
    return CreateMaybeMessage<PoseEstimate>(nullptr);
  }

  PoseEstimate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoseEstimate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoseEstimate& from);
  void MergeFrom(const PoseEstimate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseEstimate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.positioning.PoseEstimate";
  }
  protected:
  explicit PoseEstimate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_positioning_2eproto);
    return ::descriptor_table_positioning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeoPoseFieldNumber = 1,
    kSitePoseFieldNumber = 2,
  };
  // .proto.positioning.GeoPose geo_pose = 1;
  bool has_geo_pose() const;
  private:
  bool _internal_has_geo_pose() const;
  public:
  void clear_geo_pose();
  const ::proto::positioning::GeoPose& geo_pose() const;
  ::proto::positioning::GeoPose* release_geo_pose();
  ::proto::positioning::GeoPose* mutable_geo_pose();
  void set_allocated_geo_pose(::proto::positioning::GeoPose* geo_pose);
  private:
  const ::proto::positioning::GeoPose& _internal_geo_pose() const;
  ::proto::positioning::GeoPose* _internal_mutable_geo_pose();
  public:
  void unsafe_arena_set_allocated_geo_pose(
      ::proto::positioning::GeoPose* geo_pose);
  ::proto::positioning::GeoPose* unsafe_arena_release_geo_pose();

  // .proto.positioning.CartesianPose site_pose = 2;
  bool has_site_pose() const;
  private:
  bool _internal_has_site_pose() const;
  public:
  void clear_site_pose();
  const ::proto::positioning::CartesianPose& site_pose() const;
  ::proto::positioning::CartesianPose* release_site_pose();
  ::proto::positioning::CartesianPose* mutable_site_pose();
  void set_allocated_site_pose(::proto::positioning::CartesianPose* site_pose);
  private:
  const ::proto::positioning::CartesianPose& _internal_site_pose() const;
  ::proto::positioning::CartesianPose* _internal_mutable_site_pose();
  public:
  void unsafe_arena_set_allocated_site_pose(
      ::proto::positioning::CartesianPose* site_pose);
  ::proto::positioning::CartesianPose* unsafe_arena_release_site_pose();

  // @@protoc_insertion_point(class_scope:proto.positioning.PoseEstimate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::positioning::GeoPose* geo_pose_;
  ::proto::positioning::CartesianPose* site_pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_positioning_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.positioning.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.positioning.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_positioning_2eproto);
    return ::descriptor_table_positioning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryIdFieldNumber = 1,
    kPoseEstimateFieldNumber = 2,
    kConfidenceFieldNumber = 3,
  };
  // string query_id = 1;
  void clear_query_id();
  const std::string& query_id() const;
  void set_query_id(const std::string& value);
  void set_query_id(std::string&& value);
  void set_query_id(const char* value);
  void set_query_id(const char* value, size_t size);
  std::string* mutable_query_id();
  std::string* release_query_id();
  void set_allocated_query_id(std::string* query_id);
  private:
  const std::string& _internal_query_id() const;
  void _internal_set_query_id(const std::string& value);
  std::string* _internal_mutable_query_id();
  public:

  // .proto.positioning.PoseEstimate pose_estimate = 2;
  bool has_pose_estimate() const;
  private:
  bool _internal_has_pose_estimate() const;
  public:
  void clear_pose_estimate();
  const ::proto::positioning::PoseEstimate& pose_estimate() const;
  ::proto::positioning::PoseEstimate* release_pose_estimate();
  ::proto::positioning::PoseEstimate* mutable_pose_estimate();
  void set_allocated_pose_estimate(::proto::positioning::PoseEstimate* pose_estimate);
  private:
  const ::proto::positioning::PoseEstimate& _internal_pose_estimate() const;
  ::proto::positioning::PoseEstimate* _internal_mutable_pose_estimate();
  public:
  void unsafe_arena_set_allocated_pose_estimate(
      ::proto::positioning::PoseEstimate* pose_estimate);
  ::proto::positioning::PoseEstimate* unsafe_arena_release_pose_estimate();

  // float confidence = 3;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:proto.positioning.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_id_;
  ::proto::positioning::PoseEstimate* pose_estimate_;
  float confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_positioning_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CartesianLocation

// float x = 1;
inline void CartesianLocation::clear_x() {
  x_ = 0;
}
inline float CartesianLocation::_internal_x() const {
  return x_;
}
inline float CartesianLocation::x() const {
  // @@protoc_insertion_point(field_get:proto.positioning.CartesianLocation.x)
  return _internal_x();
}
inline void CartesianLocation::_internal_set_x(float value) {
  
  x_ = value;
}
inline void CartesianLocation::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:proto.positioning.CartesianLocation.x)
}

// float y = 2;
inline void CartesianLocation::clear_y() {
  y_ = 0;
}
inline float CartesianLocation::_internal_y() const {
  return y_;
}
inline float CartesianLocation::y() const {
  // @@protoc_insertion_point(field_get:proto.positioning.CartesianLocation.y)
  return _internal_y();
}
inline void CartesianLocation::_internal_set_y(float value) {
  
  y_ = value;
}
inline void CartesianLocation::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:proto.positioning.CartesianLocation.y)
}

// float z = 3;
inline void CartesianLocation::clear_z() {
  z_ = 0;
}
inline float CartesianLocation::_internal_z() const {
  return z_;
}
inline float CartesianLocation::z() const {
  // @@protoc_insertion_point(field_get:proto.positioning.CartesianLocation.z)
  return _internal_z();
}
inline void CartesianLocation::_internal_set_z(float value) {
  
  z_ = value;
}
inline void CartesianLocation::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:proto.positioning.CartesianLocation.z)
}

// -------------------------------------------------------------------

// GeoLocation3D

// double longitude = 1;
inline void GeoLocation3D::clear_longitude() {
  longitude_ = 0;
}
inline double GeoLocation3D::_internal_longitude() const {
  return longitude_;
}
inline double GeoLocation3D::longitude() const {
  // @@protoc_insertion_point(field_get:proto.positioning.GeoLocation3D.longitude)
  return _internal_longitude();
}
inline void GeoLocation3D::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void GeoLocation3D::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:proto.positioning.GeoLocation3D.longitude)
}

// double latitude = 2;
inline void GeoLocation3D::clear_latitude() {
  latitude_ = 0;
}
inline double GeoLocation3D::_internal_latitude() const {
  return latitude_;
}
inline double GeoLocation3D::latitude() const {
  // @@protoc_insertion_point(field_get:proto.positioning.GeoLocation3D.latitude)
  return _internal_latitude();
}
inline void GeoLocation3D::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void GeoLocation3D::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:proto.positioning.GeoLocation3D.latitude)
}

// float z = 3;
inline void GeoLocation3D::clear_z() {
  z_ = 0;
}
inline float GeoLocation3D::_internal_z() const {
  return z_;
}
inline float GeoLocation3D::z() const {
  // @@protoc_insertion_point(field_get:proto.positioning.GeoLocation3D.z)
  return _internal_z();
}
inline void GeoLocation3D::_internal_set_z(float value) {
  
  z_ = value;
}
inline void GeoLocation3D::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:proto.positioning.GeoLocation3D.z)
}

// -------------------------------------------------------------------

// Quaternion

// float x = 1;
inline void Quaternion::clear_x() {
  x_ = 0;
}
inline float Quaternion::_internal_x() const {
  return x_;
}
inline float Quaternion::x() const {
  // @@protoc_insertion_point(field_get:proto.positioning.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Quaternion::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:proto.positioning.Quaternion.x)
}

// float y = 2;
inline void Quaternion::clear_y() {
  y_ = 0;
}
inline float Quaternion::_internal_y() const {
  return y_;
}
inline float Quaternion::y() const {
  // @@protoc_insertion_point(field_get:proto.positioning.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Quaternion::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:proto.positioning.Quaternion.y)
}

// float z = 3;
inline void Quaternion::clear_z() {
  z_ = 0;
}
inline float Quaternion::_internal_z() const {
  return z_;
}
inline float Quaternion::z() const {
  // @@protoc_insertion_point(field_get:proto.positioning.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Quaternion::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:proto.positioning.Quaternion.z)
}

// float w = 4;
inline void Quaternion::clear_w() {
  w_ = 0;
}
inline float Quaternion::_internal_w() const {
  return w_;
}
inline float Quaternion::w() const {
  // @@protoc_insertion_point(field_get:proto.positioning.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::_internal_set_w(float value) {
  
  w_ = value;
}
inline void Quaternion::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:proto.positioning.Quaternion.w)
}

// -------------------------------------------------------------------

// CartesianPose

// .proto.positioning.CartesianLocation location = 1;
inline bool CartesianPose::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool CartesianPose::has_location() const {
  return _internal_has_location();
}
inline void CartesianPose::clear_location() {
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::proto::positioning::CartesianLocation& CartesianPose::_internal_location() const {
  const ::proto::positioning::CartesianLocation* p = location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::positioning::CartesianLocation*>(
      &::proto::positioning::_CartesianLocation_default_instance_);
}
inline const ::proto::positioning::CartesianLocation& CartesianPose::location() const {
  // @@protoc_insertion_point(field_get:proto.positioning.CartesianPose.location)
  return _internal_location();
}
inline void CartesianPose::unsafe_arena_set_allocated_location(
    ::proto::positioning::CartesianLocation* location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.positioning.CartesianPose.location)
}
inline ::proto::positioning::CartesianLocation* CartesianPose::release_location() {
  
  ::proto::positioning::CartesianLocation* temp = location_;
  location_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::positioning::CartesianLocation* CartesianPose::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:proto.positioning.CartesianPose.location)
  
  ::proto::positioning::CartesianLocation* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::proto::positioning::CartesianLocation* CartesianPose::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::positioning::CartesianLocation>(GetArena());
    location_ = p;
  }
  return location_;
}
inline ::proto::positioning::CartesianLocation* CartesianPose::mutable_location() {
  // @@protoc_insertion_point(field_mutable:proto.positioning.CartesianPose.location)
  return _internal_mutable_location();
}
inline void CartesianPose::set_allocated_location(::proto::positioning::CartesianLocation* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:proto.positioning.CartesianPose.location)
}

// .proto.positioning.Quaternion orientation = 2;
inline bool CartesianPose::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool CartesianPose::has_orientation() const {
  return _internal_has_orientation();
}
inline void CartesianPose::clear_orientation() {
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::proto::positioning::Quaternion& CartesianPose::_internal_orientation() const {
  const ::proto::positioning::Quaternion* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::positioning::Quaternion*>(
      &::proto::positioning::_Quaternion_default_instance_);
}
inline const ::proto::positioning::Quaternion& CartesianPose::orientation() const {
  // @@protoc_insertion_point(field_get:proto.positioning.CartesianPose.orientation)
  return _internal_orientation();
}
inline void CartesianPose::unsafe_arena_set_allocated_orientation(
    ::proto::positioning::Quaternion* orientation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.positioning.CartesianPose.orientation)
}
inline ::proto::positioning::Quaternion* CartesianPose::release_orientation() {
  
  ::proto::positioning::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::positioning::Quaternion* CartesianPose::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:proto.positioning.CartesianPose.orientation)
  
  ::proto::positioning::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::proto::positioning::Quaternion* CartesianPose::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::positioning::Quaternion>(GetArena());
    orientation_ = p;
  }
  return orientation_;
}
inline ::proto::positioning::Quaternion* CartesianPose::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:proto.positioning.CartesianPose.orientation)
  return _internal_mutable_orientation();
}
inline void CartesianPose::set_allocated_orientation(::proto::positioning::Quaternion* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:proto.positioning.CartesianPose.orientation)
}

// -------------------------------------------------------------------

// GeoPose

// .proto.positioning.GeoLocation3D location = 1;
inline bool GeoPose::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool GeoPose::has_location() const {
  return _internal_has_location();
}
inline void GeoPose::clear_location() {
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::proto::positioning::GeoLocation3D& GeoPose::_internal_location() const {
  const ::proto::positioning::GeoLocation3D* p = location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::positioning::GeoLocation3D*>(
      &::proto::positioning::_GeoLocation3D_default_instance_);
}
inline const ::proto::positioning::GeoLocation3D& GeoPose::location() const {
  // @@protoc_insertion_point(field_get:proto.positioning.GeoPose.location)
  return _internal_location();
}
inline void GeoPose::unsafe_arena_set_allocated_location(
    ::proto::positioning::GeoLocation3D* location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.positioning.GeoPose.location)
}
inline ::proto::positioning::GeoLocation3D* GeoPose::release_location() {
  
  ::proto::positioning::GeoLocation3D* temp = location_;
  location_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::positioning::GeoLocation3D* GeoPose::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:proto.positioning.GeoPose.location)
  
  ::proto::positioning::GeoLocation3D* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::proto::positioning::GeoLocation3D* GeoPose::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::positioning::GeoLocation3D>(GetArena());
    location_ = p;
  }
  return location_;
}
inline ::proto::positioning::GeoLocation3D* GeoPose::mutable_location() {
  // @@protoc_insertion_point(field_mutable:proto.positioning.GeoPose.location)
  return _internal_mutable_location();
}
inline void GeoPose::set_allocated_location(::proto::positioning::GeoLocation3D* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:proto.positioning.GeoPose.location)
}

// .proto.positioning.Quaternion orientation = 2;
inline bool GeoPose::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool GeoPose::has_orientation() const {
  return _internal_has_orientation();
}
inline void GeoPose::clear_orientation() {
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::proto::positioning::Quaternion& GeoPose::_internal_orientation() const {
  const ::proto::positioning::Quaternion* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::positioning::Quaternion*>(
      &::proto::positioning::_Quaternion_default_instance_);
}
inline const ::proto::positioning::Quaternion& GeoPose::orientation() const {
  // @@protoc_insertion_point(field_get:proto.positioning.GeoPose.orientation)
  return _internal_orientation();
}
inline void GeoPose::unsafe_arena_set_allocated_orientation(
    ::proto::positioning::Quaternion* orientation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.positioning.GeoPose.orientation)
}
inline ::proto::positioning::Quaternion* GeoPose::release_orientation() {
  
  ::proto::positioning::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::positioning::Quaternion* GeoPose::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:proto.positioning.GeoPose.orientation)
  
  ::proto::positioning::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::proto::positioning::Quaternion* GeoPose::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::positioning::Quaternion>(GetArena());
    orientation_ = p;
  }
  return orientation_;
}
inline ::proto::positioning::Quaternion* GeoPose::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:proto.positioning.GeoPose.orientation)
  return _internal_mutable_orientation();
}
inline void GeoPose::set_allocated_orientation(::proto::positioning::Quaternion* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:proto.positioning.GeoPose.orientation)
}

// -------------------------------------------------------------------

// PolygonSearchSubset_GeoLocation2D

// double longitude = 1;
inline void PolygonSearchSubset_GeoLocation2D::clear_longitude() {
  longitude_ = 0;
}
inline double PolygonSearchSubset_GeoLocation2D::_internal_longitude() const {
  return longitude_;
}
inline double PolygonSearchSubset_GeoLocation2D::longitude() const {
  // @@protoc_insertion_point(field_get:proto.positioning.PolygonSearchSubset.GeoLocation2D.longitude)
  return _internal_longitude();
}
inline void PolygonSearchSubset_GeoLocation2D::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void PolygonSearchSubset_GeoLocation2D::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:proto.positioning.PolygonSearchSubset.GeoLocation2D.longitude)
}

// double latitude = 2;
inline void PolygonSearchSubset_GeoLocation2D::clear_latitude() {
  latitude_ = 0;
}
inline double PolygonSearchSubset_GeoLocation2D::_internal_latitude() const {
  return latitude_;
}
inline double PolygonSearchSubset_GeoLocation2D::latitude() const {
  // @@protoc_insertion_point(field_get:proto.positioning.PolygonSearchSubset.GeoLocation2D.latitude)
  return _internal_latitude();
}
inline void PolygonSearchSubset_GeoLocation2D::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void PolygonSearchSubset_GeoLocation2D::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:proto.positioning.PolygonSearchSubset.GeoLocation2D.latitude)
}

// -------------------------------------------------------------------

// PolygonSearchSubset

// repeated .proto.positioning.PolygonSearchSubset.GeoLocation2D points = 1;
inline int PolygonSearchSubset::_internal_points_size() const {
  return points_.size();
}
inline int PolygonSearchSubset::points_size() const {
  return _internal_points_size();
}
inline void PolygonSearchSubset::clear_points() {
  points_.Clear();
}
inline ::proto::positioning::PolygonSearchSubset_GeoLocation2D* PolygonSearchSubset::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:proto.positioning.PolygonSearchSubset.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::positioning::PolygonSearchSubset_GeoLocation2D >*
PolygonSearchSubset::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:proto.positioning.PolygonSearchSubset.points)
  return &points_;
}
inline const ::proto::positioning::PolygonSearchSubset_GeoLocation2D& PolygonSearchSubset::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::proto::positioning::PolygonSearchSubset_GeoLocation2D& PolygonSearchSubset::points(int index) const {
  // @@protoc_insertion_point(field_get:proto.positioning.PolygonSearchSubset.points)
  return _internal_points(index);
}
inline ::proto::positioning::PolygonSearchSubset_GeoLocation2D* PolygonSearchSubset::_internal_add_points() {
  return points_.Add();
}
inline ::proto::positioning::PolygonSearchSubset_GeoLocation2D* PolygonSearchSubset::add_points() {
  // @@protoc_insertion_point(field_add:proto.positioning.PolygonSearchSubset.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::positioning::PolygonSearchSubset_GeoLocation2D >&
PolygonSearchSubset::points() const {
  // @@protoc_insertion_point(field_list:proto.positioning.PolygonSearchSubset.points)
  return points_;
}

// .google.protobuf.FloatValue z_from = 2;
inline bool PolygonSearchSubset::_internal_has_z_from() const {
  return this != internal_default_instance() && z_from_ != nullptr;
}
inline bool PolygonSearchSubset::has_z_from() const {
  return _internal_has_z_from();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& PolygonSearchSubset::_internal_z_from() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = z_from_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& PolygonSearchSubset::z_from() const {
  // @@protoc_insertion_point(field_get:proto.positioning.PolygonSearchSubset.z_from)
  return _internal_z_from();
}
inline void PolygonSearchSubset::unsafe_arena_set_allocated_z_from(
    PROTOBUF_NAMESPACE_ID::FloatValue* z_from) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(z_from_);
  }
  z_from_ = z_from;
  if (z_from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.positioning.PolygonSearchSubset.z_from)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PolygonSearchSubset::release_z_from() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = z_from_;
  z_from_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PolygonSearchSubset::unsafe_arena_release_z_from() {
  // @@protoc_insertion_point(field_release:proto.positioning.PolygonSearchSubset.z_from)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = z_from_;
  z_from_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PolygonSearchSubset::_internal_mutable_z_from() {
  
  if (z_from_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    z_from_ = p;
  }
  return z_from_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PolygonSearchSubset::mutable_z_from() {
  // @@protoc_insertion_point(field_mutable:proto.positioning.PolygonSearchSubset.z_from)
  return _internal_mutable_z_from();
}
inline void PolygonSearchSubset::set_allocated_z_from(PROTOBUF_NAMESPACE_ID::FloatValue* z_from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(z_from_);
  }
  if (z_from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(z_from)->GetArena();
    if (message_arena != submessage_arena) {
      z_from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, z_from, submessage_arena);
    }
    
  } else {
    
  }
  z_from_ = z_from;
  // @@protoc_insertion_point(field_set_allocated:proto.positioning.PolygonSearchSubset.z_from)
}

// .google.protobuf.FloatValue z_to = 3;
inline bool PolygonSearchSubset::_internal_has_z_to() const {
  return this != internal_default_instance() && z_to_ != nullptr;
}
inline bool PolygonSearchSubset::has_z_to() const {
  return _internal_has_z_to();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& PolygonSearchSubset::_internal_z_to() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = z_to_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& PolygonSearchSubset::z_to() const {
  // @@protoc_insertion_point(field_get:proto.positioning.PolygonSearchSubset.z_to)
  return _internal_z_to();
}
inline void PolygonSearchSubset::unsafe_arena_set_allocated_z_to(
    PROTOBUF_NAMESPACE_ID::FloatValue* z_to) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(z_to_);
  }
  z_to_ = z_to;
  if (z_to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.positioning.PolygonSearchSubset.z_to)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PolygonSearchSubset::release_z_to() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = z_to_;
  z_to_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PolygonSearchSubset::unsafe_arena_release_z_to() {
  // @@protoc_insertion_point(field_release:proto.positioning.PolygonSearchSubset.z_to)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = z_to_;
  z_to_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PolygonSearchSubset::_internal_mutable_z_to() {
  
  if (z_to_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    z_to_ = p;
  }
  return z_to_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PolygonSearchSubset::mutable_z_to() {
  // @@protoc_insertion_point(field_mutable:proto.positioning.PolygonSearchSubset.z_to)
  return _internal_mutable_z_to();
}
inline void PolygonSearchSubset::set_allocated_z_to(PROTOBUF_NAMESPACE_ID::FloatValue* z_to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(z_to_);
  }
  if (z_to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(z_to)->GetArena();
    if (message_arena != submessage_arena) {
      z_to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, z_to, submessage_arena);
    }
    
  } else {
    
  }
  z_to_ = z_to;
  // @@protoc_insertion_point(field_set_allocated:proto.positioning.PolygonSearchSubset.z_to)
}

// -------------------------------------------------------------------

// CylinderSearchSubset

// .proto.positioning.GeoLocation3D center = 1;
inline bool CylinderSearchSubset::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool CylinderSearchSubset::has_center() const {
  return _internal_has_center();
}
inline void CylinderSearchSubset::clear_center() {
  if (GetArena() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
inline const ::proto::positioning::GeoLocation3D& CylinderSearchSubset::_internal_center() const {
  const ::proto::positioning::GeoLocation3D* p = center_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::positioning::GeoLocation3D*>(
      &::proto::positioning::_GeoLocation3D_default_instance_);
}
inline const ::proto::positioning::GeoLocation3D& CylinderSearchSubset::center() const {
  // @@protoc_insertion_point(field_get:proto.positioning.CylinderSearchSubset.center)
  return _internal_center();
}
inline void CylinderSearchSubset::unsafe_arena_set_allocated_center(
    ::proto::positioning::GeoLocation3D* center) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.positioning.CylinderSearchSubset.center)
}
inline ::proto::positioning::GeoLocation3D* CylinderSearchSubset::release_center() {
  
  ::proto::positioning::GeoLocation3D* temp = center_;
  center_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::positioning::GeoLocation3D* CylinderSearchSubset::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:proto.positioning.CylinderSearchSubset.center)
  
  ::proto::positioning::GeoLocation3D* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::proto::positioning::GeoLocation3D* CylinderSearchSubset::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::positioning::GeoLocation3D>(GetArena());
    center_ = p;
  }
  return center_;
}
inline ::proto::positioning::GeoLocation3D* CylinderSearchSubset::mutable_center() {
  // @@protoc_insertion_point(field_mutable:proto.positioning.CylinderSearchSubset.center)
  return _internal_mutable_center();
}
inline void CylinderSearchSubset::set_allocated_center(::proto::positioning::GeoLocation3D* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:proto.positioning.CylinderSearchSubset.center)
}

// float radius = 2;
inline void CylinderSearchSubset::clear_radius() {
  radius_ = 0;
}
inline float CylinderSearchSubset::_internal_radius() const {
  return radius_;
}
inline float CylinderSearchSubset::radius() const {
  // @@protoc_insertion_point(field_get:proto.positioning.CylinderSearchSubset.radius)
  return _internal_radius();
}
inline void CylinderSearchSubset::_internal_set_radius(float value) {
  
  radius_ = value;
}
inline void CylinderSearchSubset::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:proto.positioning.CylinderSearchSubset.radius)
}

// .google.protobuf.FloatValue z_offset = 3;
inline bool CylinderSearchSubset::_internal_has_z_offset() const {
  return this != internal_default_instance() && z_offset_ != nullptr;
}
inline bool CylinderSearchSubset::has_z_offset() const {
  return _internal_has_z_offset();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& CylinderSearchSubset::_internal_z_offset() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = z_offset_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& CylinderSearchSubset::z_offset() const {
  // @@protoc_insertion_point(field_get:proto.positioning.CylinderSearchSubset.z_offset)
  return _internal_z_offset();
}
inline void CylinderSearchSubset::unsafe_arena_set_allocated_z_offset(
    PROTOBUF_NAMESPACE_ID::FloatValue* z_offset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(z_offset_);
  }
  z_offset_ = z_offset;
  if (z_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.positioning.CylinderSearchSubset.z_offset)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* CylinderSearchSubset::release_z_offset() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = z_offset_;
  z_offset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* CylinderSearchSubset::unsafe_arena_release_z_offset() {
  // @@protoc_insertion_point(field_release:proto.positioning.CylinderSearchSubset.z_offset)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = z_offset_;
  z_offset_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* CylinderSearchSubset::_internal_mutable_z_offset() {
  
  if (z_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    z_offset_ = p;
  }
  return z_offset_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* CylinderSearchSubset::mutable_z_offset() {
  // @@protoc_insertion_point(field_mutable:proto.positioning.CylinderSearchSubset.z_offset)
  return _internal_mutable_z_offset();
}
inline void CylinderSearchSubset::set_allocated_z_offset(PROTOBUF_NAMESPACE_ID::FloatValue* z_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(z_offset_);
  }
  if (z_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(z_offset)->GetArena();
    if (message_arena != submessage_arena) {
      z_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, z_offset, submessage_arena);
    }
    
  } else {
    
  }
  z_offset_ = z_offset;
  // @@protoc_insertion_point(field_set_allocated:proto.positioning.CylinderSearchSubset.z_offset)
}

// -------------------------------------------------------------------

// WifiNetworkMeasurement

// string mac_address = 1;
inline void WifiNetworkMeasurement::clear_mac_address() {
  mac_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WifiNetworkMeasurement::mac_address() const {
  // @@protoc_insertion_point(field_get:proto.positioning.WifiNetworkMeasurement.mac_address)
  return _internal_mac_address();
}
inline void WifiNetworkMeasurement::set_mac_address(const std::string& value) {
  _internal_set_mac_address(value);
  // @@protoc_insertion_point(field_set:proto.positioning.WifiNetworkMeasurement.mac_address)
}
inline std::string* WifiNetworkMeasurement::mutable_mac_address() {
  // @@protoc_insertion_point(field_mutable:proto.positioning.WifiNetworkMeasurement.mac_address)
  return _internal_mutable_mac_address();
}
inline const std::string& WifiNetworkMeasurement::_internal_mac_address() const {
  return mac_address_.Get();
}
inline void WifiNetworkMeasurement::_internal_set_mac_address(const std::string& value) {
  
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WifiNetworkMeasurement::set_mac_address(std::string&& value) {
  
  mac_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.positioning.WifiNetworkMeasurement.mac_address)
}
inline void WifiNetworkMeasurement::set_mac_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.positioning.WifiNetworkMeasurement.mac_address)
}
inline void WifiNetworkMeasurement::set_mac_address(const char* value,
    size_t size) {
  
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.positioning.WifiNetworkMeasurement.mac_address)
}
inline std::string* WifiNetworkMeasurement::_internal_mutable_mac_address() {
  
  return mac_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WifiNetworkMeasurement::release_mac_address() {
  // @@protoc_insertion_point(field_release:proto.positioning.WifiNetworkMeasurement.mac_address)
  return mac_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WifiNetworkMeasurement::set_allocated_mac_address(std::string* mac_address) {
  if (mac_address != nullptr) {
    
  } else {
    
  }
  mac_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.positioning.WifiNetworkMeasurement.mac_address)
}

// int32 frequency_mhz = 2;
inline void WifiNetworkMeasurement::clear_frequency_mhz() {
  frequency_mhz_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WifiNetworkMeasurement::_internal_frequency_mhz() const {
  return frequency_mhz_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WifiNetworkMeasurement::frequency_mhz() const {
  // @@protoc_insertion_point(field_get:proto.positioning.WifiNetworkMeasurement.frequency_mhz)
  return _internal_frequency_mhz();
}
inline void WifiNetworkMeasurement::_internal_set_frequency_mhz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frequency_mhz_ = value;
}
inline void WifiNetworkMeasurement::set_frequency_mhz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frequency_mhz(value);
  // @@protoc_insertion_point(field_set:proto.positioning.WifiNetworkMeasurement.frequency_mhz)
}

// int32 level_db = 3;
inline void WifiNetworkMeasurement::clear_level_db() {
  level_db_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WifiNetworkMeasurement::_internal_level_db() const {
  return level_db_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WifiNetworkMeasurement::level_db() const {
  // @@protoc_insertion_point(field_get:proto.positioning.WifiNetworkMeasurement.level_db)
  return _internal_level_db();
}
inline void WifiNetworkMeasurement::_internal_set_level_db(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_db_ = value;
}
inline void WifiNetworkMeasurement::set_level_db(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level_db(value);
  // @@protoc_insertion_point(field_set:proto.positioning.WifiNetworkMeasurement.level_db)
}

// string ssid = 4;
inline void WifiNetworkMeasurement::clear_ssid() {
  ssid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WifiNetworkMeasurement::ssid() const {
  // @@protoc_insertion_point(field_get:proto.positioning.WifiNetworkMeasurement.ssid)
  return _internal_ssid();
}
inline void WifiNetworkMeasurement::set_ssid(const std::string& value) {
  _internal_set_ssid(value);
  // @@protoc_insertion_point(field_set:proto.positioning.WifiNetworkMeasurement.ssid)
}
inline std::string* WifiNetworkMeasurement::mutable_ssid() {
  // @@protoc_insertion_point(field_mutable:proto.positioning.WifiNetworkMeasurement.ssid)
  return _internal_mutable_ssid();
}
inline const std::string& WifiNetworkMeasurement::_internal_ssid() const {
  return ssid_.Get();
}
inline void WifiNetworkMeasurement::_internal_set_ssid(const std::string& value) {
  
  ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WifiNetworkMeasurement::set_ssid(std::string&& value) {
  
  ssid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.positioning.WifiNetworkMeasurement.ssid)
}
inline void WifiNetworkMeasurement::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.positioning.WifiNetworkMeasurement.ssid)
}
inline void WifiNetworkMeasurement::set_ssid(const char* value,
    size_t size) {
  
  ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.positioning.WifiNetworkMeasurement.ssid)
}
inline std::string* WifiNetworkMeasurement::_internal_mutable_ssid() {
  
  return ssid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WifiNetworkMeasurement::release_ssid() {
  // @@protoc_insertion_point(field_release:proto.positioning.WifiNetworkMeasurement.ssid)
  return ssid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WifiNetworkMeasurement::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.positioning.WifiNetworkMeasurement.ssid)
}

// -------------------------------------------------------------------

// BluetoothMeasurement

// string mac_address = 1;
inline void BluetoothMeasurement::clear_mac_address() {
  mac_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BluetoothMeasurement::mac_address() const {
  // @@protoc_insertion_point(field_get:proto.positioning.BluetoothMeasurement.mac_address)
  return _internal_mac_address();
}
inline void BluetoothMeasurement::set_mac_address(const std::string& value) {
  _internal_set_mac_address(value);
  // @@protoc_insertion_point(field_set:proto.positioning.BluetoothMeasurement.mac_address)
}
inline std::string* BluetoothMeasurement::mutable_mac_address() {
  // @@protoc_insertion_point(field_mutable:proto.positioning.BluetoothMeasurement.mac_address)
  return _internal_mutable_mac_address();
}
inline const std::string& BluetoothMeasurement::_internal_mac_address() const {
  return mac_address_.Get();
}
inline void BluetoothMeasurement::_internal_set_mac_address(const std::string& value) {
  
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BluetoothMeasurement::set_mac_address(std::string&& value) {
  
  mac_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.positioning.BluetoothMeasurement.mac_address)
}
inline void BluetoothMeasurement::set_mac_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.positioning.BluetoothMeasurement.mac_address)
}
inline void BluetoothMeasurement::set_mac_address(const char* value,
    size_t size) {
  
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.positioning.BluetoothMeasurement.mac_address)
}
inline std::string* BluetoothMeasurement::_internal_mutable_mac_address() {
  
  return mac_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BluetoothMeasurement::release_mac_address() {
  // @@protoc_insertion_point(field_release:proto.positioning.BluetoothMeasurement.mac_address)
  return mac_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BluetoothMeasurement::set_allocated_mac_address(std::string* mac_address) {
  if (mac_address != nullptr) {
    
  } else {
    
  }
  mac_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.positioning.BluetoothMeasurement.mac_address)
}

// int32 level_db = 2;
inline void BluetoothMeasurement::clear_level_db() {
  level_db_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BluetoothMeasurement::_internal_level_db() const {
  return level_db_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BluetoothMeasurement::level_db() const {
  // @@protoc_insertion_point(field_get:proto.positioning.BluetoothMeasurement.level_db)
  return _internal_level_db();
}
inline void BluetoothMeasurement::_internal_set_level_db(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_db_ = value;
}
inline void BluetoothMeasurement::set_level_db(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level_db(value);
  // @@protoc_insertion_point(field_set:proto.positioning.BluetoothMeasurement.level_db)
}

// -------------------------------------------------------------------

// CameraIntrinsics

// float fx = 1;
inline void CameraIntrinsics::clear_fx() {
  fx_ = 0;
}
inline float CameraIntrinsics::_internal_fx() const {
  return fx_;
}
inline float CameraIntrinsics::fx() const {
  // @@protoc_insertion_point(field_get:proto.positioning.CameraIntrinsics.fx)
  return _internal_fx();
}
inline void CameraIntrinsics::_internal_set_fx(float value) {
  
  fx_ = value;
}
inline void CameraIntrinsics::set_fx(float value) {
  _internal_set_fx(value);
  // @@protoc_insertion_point(field_set:proto.positioning.CameraIntrinsics.fx)
}

// float fy = 2;
inline void CameraIntrinsics::clear_fy() {
  fy_ = 0;
}
inline float CameraIntrinsics::_internal_fy() const {
  return fy_;
}
inline float CameraIntrinsics::fy() const {
  // @@protoc_insertion_point(field_get:proto.positioning.CameraIntrinsics.fy)
  return _internal_fy();
}
inline void CameraIntrinsics::_internal_set_fy(float value) {
  
  fy_ = value;
}
inline void CameraIntrinsics::set_fy(float value) {
  _internal_set_fy(value);
  // @@protoc_insertion_point(field_set:proto.positioning.CameraIntrinsics.fy)
}

// float px = 3;
inline void CameraIntrinsics::clear_px() {
  px_ = 0;
}
inline float CameraIntrinsics::_internal_px() const {
  return px_;
}
inline float CameraIntrinsics::px() const {
  // @@protoc_insertion_point(field_get:proto.positioning.CameraIntrinsics.px)
  return _internal_px();
}
inline void CameraIntrinsics::_internal_set_px(float value) {
  
  px_ = value;
}
inline void CameraIntrinsics::set_px(float value) {
  _internal_set_px(value);
  // @@protoc_insertion_point(field_set:proto.positioning.CameraIntrinsics.px)
}

// float py = 4;
inline void CameraIntrinsics::clear_py() {
  py_ = 0;
}
inline float CameraIntrinsics::_internal_py() const {
  return py_;
}
inline float CameraIntrinsics::py() const {
  // @@protoc_insertion_point(field_get:proto.positioning.CameraIntrinsics.py)
  return _internal_py();
}
inline void CameraIntrinsics::_internal_set_py(float value) {
  
  py_ = value;
}
inline void CameraIntrinsics::set_py(float value) {
  _internal_set_py(value);
  // @@protoc_insertion_point(field_set:proto.positioning.CameraIntrinsics.py)
}

// -------------------------------------------------------------------

// VisualMeasurement

// bytes picture = 1;
inline void VisualMeasurement::clear_picture() {
  picture_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VisualMeasurement::picture() const {
  // @@protoc_insertion_point(field_get:proto.positioning.VisualMeasurement.picture)
  return _internal_picture();
}
inline void VisualMeasurement::set_picture(const std::string& value) {
  _internal_set_picture(value);
  // @@protoc_insertion_point(field_set:proto.positioning.VisualMeasurement.picture)
}
inline std::string* VisualMeasurement::mutable_picture() {
  // @@protoc_insertion_point(field_mutable:proto.positioning.VisualMeasurement.picture)
  return _internal_mutable_picture();
}
inline const std::string& VisualMeasurement::_internal_picture() const {
  return picture_.Get();
}
inline void VisualMeasurement::_internal_set_picture(const std::string& value) {
  
  picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VisualMeasurement::set_picture(std::string&& value) {
  
  picture_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.positioning.VisualMeasurement.picture)
}
inline void VisualMeasurement::set_picture(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.positioning.VisualMeasurement.picture)
}
inline void VisualMeasurement::set_picture(const void* value,
    size_t size) {
  
  picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.positioning.VisualMeasurement.picture)
}
inline std::string* VisualMeasurement::_internal_mutable_picture() {
  
  return picture_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VisualMeasurement::release_picture() {
  // @@protoc_insertion_point(field_release:proto.positioning.VisualMeasurement.picture)
  return picture_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VisualMeasurement::set_allocated_picture(std::string* picture) {
  if (picture != nullptr) {
    
  } else {
    
  }
  picture_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), picture,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.positioning.VisualMeasurement.picture)
}

// .proto.positioning.CameraIntrinsics camera_intrinsics = 2;
inline bool VisualMeasurement::_internal_has_camera_intrinsics() const {
  return this != internal_default_instance() && camera_intrinsics_ != nullptr;
}
inline bool VisualMeasurement::has_camera_intrinsics() const {
  return _internal_has_camera_intrinsics();
}
inline void VisualMeasurement::clear_camera_intrinsics() {
  if (GetArena() == nullptr && camera_intrinsics_ != nullptr) {
    delete camera_intrinsics_;
  }
  camera_intrinsics_ = nullptr;
}
inline const ::proto::positioning::CameraIntrinsics& VisualMeasurement::_internal_camera_intrinsics() const {
  const ::proto::positioning::CameraIntrinsics* p = camera_intrinsics_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::positioning::CameraIntrinsics*>(
      &::proto::positioning::_CameraIntrinsics_default_instance_);
}
inline const ::proto::positioning::CameraIntrinsics& VisualMeasurement::camera_intrinsics() const {
  // @@protoc_insertion_point(field_get:proto.positioning.VisualMeasurement.camera_intrinsics)
  return _internal_camera_intrinsics();
}
inline void VisualMeasurement::unsafe_arena_set_allocated_camera_intrinsics(
    ::proto::positioning::CameraIntrinsics* camera_intrinsics) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_intrinsics_);
  }
  camera_intrinsics_ = camera_intrinsics;
  if (camera_intrinsics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.positioning.VisualMeasurement.camera_intrinsics)
}
inline ::proto::positioning::CameraIntrinsics* VisualMeasurement::release_camera_intrinsics() {
  
  ::proto::positioning::CameraIntrinsics* temp = camera_intrinsics_;
  camera_intrinsics_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::positioning::CameraIntrinsics* VisualMeasurement::unsafe_arena_release_camera_intrinsics() {
  // @@protoc_insertion_point(field_release:proto.positioning.VisualMeasurement.camera_intrinsics)
  
  ::proto::positioning::CameraIntrinsics* temp = camera_intrinsics_;
  camera_intrinsics_ = nullptr;
  return temp;
}
inline ::proto::positioning::CameraIntrinsics* VisualMeasurement::_internal_mutable_camera_intrinsics() {
  
  if (camera_intrinsics_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::positioning::CameraIntrinsics>(GetArena());
    camera_intrinsics_ = p;
  }
  return camera_intrinsics_;
}
inline ::proto::positioning::CameraIntrinsics* VisualMeasurement::mutable_camera_intrinsics() {
  // @@protoc_insertion_point(field_mutable:proto.positioning.VisualMeasurement.camera_intrinsics)
  return _internal_mutable_camera_intrinsics();
}
inline void VisualMeasurement::set_allocated_camera_intrinsics(::proto::positioning::CameraIntrinsics* camera_intrinsics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete camera_intrinsics_;
  }
  if (camera_intrinsics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(camera_intrinsics);
    if (message_arena != submessage_arena) {
      camera_intrinsics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_intrinsics, submessage_arena);
    }
    
  } else {
    
  }
  camera_intrinsics_ = camera_intrinsics;
  // @@protoc_insertion_point(field_set_allocated:proto.positioning.VisualMeasurement.camera_intrinsics)
}

// .proto.positioning.CartesianPose relative_camera_pose = 3;
inline bool VisualMeasurement::_internal_has_relative_camera_pose() const {
  return this != internal_default_instance() && relative_camera_pose_ != nullptr;
}
inline bool VisualMeasurement::has_relative_camera_pose() const {
  return _internal_has_relative_camera_pose();
}
inline void VisualMeasurement::clear_relative_camera_pose() {
  if (GetArena() == nullptr && relative_camera_pose_ != nullptr) {
    delete relative_camera_pose_;
  }
  relative_camera_pose_ = nullptr;
}
inline const ::proto::positioning::CartesianPose& VisualMeasurement::_internal_relative_camera_pose() const {
  const ::proto::positioning::CartesianPose* p = relative_camera_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::positioning::CartesianPose*>(
      &::proto::positioning::_CartesianPose_default_instance_);
}
inline const ::proto::positioning::CartesianPose& VisualMeasurement::relative_camera_pose() const {
  // @@protoc_insertion_point(field_get:proto.positioning.VisualMeasurement.relative_camera_pose)
  return _internal_relative_camera_pose();
}
inline void VisualMeasurement::unsafe_arena_set_allocated_relative_camera_pose(
    ::proto::positioning::CartesianPose* relative_camera_pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relative_camera_pose_);
  }
  relative_camera_pose_ = relative_camera_pose;
  if (relative_camera_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.positioning.VisualMeasurement.relative_camera_pose)
}
inline ::proto::positioning::CartesianPose* VisualMeasurement::release_relative_camera_pose() {
  
  ::proto::positioning::CartesianPose* temp = relative_camera_pose_;
  relative_camera_pose_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::positioning::CartesianPose* VisualMeasurement::unsafe_arena_release_relative_camera_pose() {
  // @@protoc_insertion_point(field_release:proto.positioning.VisualMeasurement.relative_camera_pose)
  
  ::proto::positioning::CartesianPose* temp = relative_camera_pose_;
  relative_camera_pose_ = nullptr;
  return temp;
}
inline ::proto::positioning::CartesianPose* VisualMeasurement::_internal_mutable_relative_camera_pose() {
  
  if (relative_camera_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::positioning::CartesianPose>(GetArena());
    relative_camera_pose_ = p;
  }
  return relative_camera_pose_;
}
inline ::proto::positioning::CartesianPose* VisualMeasurement::mutable_relative_camera_pose() {
  // @@protoc_insertion_point(field_mutable:proto.positioning.VisualMeasurement.relative_camera_pose)
  return _internal_mutable_relative_camera_pose();
}
inline void VisualMeasurement::set_allocated_relative_camera_pose(::proto::positioning::CartesianPose* relative_camera_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete relative_camera_pose_;
  }
  if (relative_camera_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(relative_camera_pose);
    if (message_arena != submessage_arena) {
      relative_camera_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relative_camera_pose, submessage_arena);
    }
    
  } else {
    
  }
  relative_camera_pose_ = relative_camera_pose;
  // @@protoc_insertion_point(field_set_allocated:proto.positioning.VisualMeasurement.relative_camera_pose)
}

// -------------------------------------------------------------------

// Query

// string query_id = 1;
inline void Query::clear_query_id() {
  query_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Query::query_id() const {
  // @@protoc_insertion_point(field_get:proto.positioning.Query.query_id)
  return _internal_query_id();
}
inline void Query::set_query_id(const std::string& value) {
  _internal_set_query_id(value);
  // @@protoc_insertion_point(field_set:proto.positioning.Query.query_id)
}
inline std::string* Query::mutable_query_id() {
  // @@protoc_insertion_point(field_mutable:proto.positioning.Query.query_id)
  return _internal_mutable_query_id();
}
inline const std::string& Query::_internal_query_id() const {
  return query_id_.Get();
}
inline void Query::_internal_set_query_id(const std::string& value) {
  
  query_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Query::set_query_id(std::string&& value) {
  
  query_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.positioning.Query.query_id)
}
inline void Query::set_query_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.positioning.Query.query_id)
}
inline void Query::set_query_id(const char* value,
    size_t size) {
  
  query_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.positioning.Query.query_id)
}
inline std::string* Query::_internal_mutable_query_id() {
  
  return query_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Query::release_query_id() {
  // @@protoc_insertion_point(field_release:proto.positioning.Query.query_id)
  return query_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Query::set_allocated_query_id(std::string* query_id) {
  if (query_id != nullptr) {
    
  } else {
    
  }
  query_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.positioning.Query.query_id)
}

// repeated .proto.positioning.WifiNetworkMeasurement wifi_measurements = 2;
inline int Query::_internal_wifi_measurements_size() const {
  return wifi_measurements_.size();
}
inline int Query::wifi_measurements_size() const {
  return _internal_wifi_measurements_size();
}
inline void Query::clear_wifi_measurements() {
  wifi_measurements_.Clear();
}
inline ::proto::positioning::WifiNetworkMeasurement* Query::mutable_wifi_measurements(int index) {
  // @@protoc_insertion_point(field_mutable:proto.positioning.Query.wifi_measurements)
  return wifi_measurements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::positioning::WifiNetworkMeasurement >*
Query::mutable_wifi_measurements() {
  // @@protoc_insertion_point(field_mutable_list:proto.positioning.Query.wifi_measurements)
  return &wifi_measurements_;
}
inline const ::proto::positioning::WifiNetworkMeasurement& Query::_internal_wifi_measurements(int index) const {
  return wifi_measurements_.Get(index);
}
inline const ::proto::positioning::WifiNetworkMeasurement& Query::wifi_measurements(int index) const {
  // @@protoc_insertion_point(field_get:proto.positioning.Query.wifi_measurements)
  return _internal_wifi_measurements(index);
}
inline ::proto::positioning::WifiNetworkMeasurement* Query::_internal_add_wifi_measurements() {
  return wifi_measurements_.Add();
}
inline ::proto::positioning::WifiNetworkMeasurement* Query::add_wifi_measurements() {
  // @@protoc_insertion_point(field_add:proto.positioning.Query.wifi_measurements)
  return _internal_add_wifi_measurements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::positioning::WifiNetworkMeasurement >&
Query::wifi_measurements() const {
  // @@protoc_insertion_point(field_list:proto.positioning.Query.wifi_measurements)
  return wifi_measurements_;
}

// repeated .proto.positioning.BluetoothMeasurement bluetooth_measurements = 3;
inline int Query::_internal_bluetooth_measurements_size() const {
  return bluetooth_measurements_.size();
}
inline int Query::bluetooth_measurements_size() const {
  return _internal_bluetooth_measurements_size();
}
inline void Query::clear_bluetooth_measurements() {
  bluetooth_measurements_.Clear();
}
inline ::proto::positioning::BluetoothMeasurement* Query::mutable_bluetooth_measurements(int index) {
  // @@protoc_insertion_point(field_mutable:proto.positioning.Query.bluetooth_measurements)
  return bluetooth_measurements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::positioning::BluetoothMeasurement >*
Query::mutable_bluetooth_measurements() {
  // @@protoc_insertion_point(field_mutable_list:proto.positioning.Query.bluetooth_measurements)
  return &bluetooth_measurements_;
}
inline const ::proto::positioning::BluetoothMeasurement& Query::_internal_bluetooth_measurements(int index) const {
  return bluetooth_measurements_.Get(index);
}
inline const ::proto::positioning::BluetoothMeasurement& Query::bluetooth_measurements(int index) const {
  // @@protoc_insertion_point(field_get:proto.positioning.Query.bluetooth_measurements)
  return _internal_bluetooth_measurements(index);
}
inline ::proto::positioning::BluetoothMeasurement* Query::_internal_add_bluetooth_measurements() {
  return bluetooth_measurements_.Add();
}
inline ::proto::positioning::BluetoothMeasurement* Query::add_bluetooth_measurements() {
  // @@protoc_insertion_point(field_add:proto.positioning.Query.bluetooth_measurements)
  return _internal_add_bluetooth_measurements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::positioning::BluetoothMeasurement >&
Query::bluetooth_measurements() const {
  // @@protoc_insertion_point(field_list:proto.positioning.Query.bluetooth_measurements)
  return bluetooth_measurements_;
}

// repeated .proto.positioning.VisualMeasurement visual_measurements = 4;
inline int Query::_internal_visual_measurements_size() const {
  return visual_measurements_.size();
}
inline int Query::visual_measurements_size() const {
  return _internal_visual_measurements_size();
}
inline void Query::clear_visual_measurements() {
  visual_measurements_.Clear();
}
inline ::proto::positioning::VisualMeasurement* Query::mutable_visual_measurements(int index) {
  // @@protoc_insertion_point(field_mutable:proto.positioning.Query.visual_measurements)
  return visual_measurements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::positioning::VisualMeasurement >*
Query::mutable_visual_measurements() {
  // @@protoc_insertion_point(field_mutable_list:proto.positioning.Query.visual_measurements)
  return &visual_measurements_;
}
inline const ::proto::positioning::VisualMeasurement& Query::_internal_visual_measurements(int index) const {
  return visual_measurements_.Get(index);
}
inline const ::proto::positioning::VisualMeasurement& Query::visual_measurements(int index) const {
  // @@protoc_insertion_point(field_get:proto.positioning.Query.visual_measurements)
  return _internal_visual_measurements(index);
}
inline ::proto::positioning::VisualMeasurement* Query::_internal_add_visual_measurements() {
  return visual_measurements_.Add();
}
inline ::proto::positioning::VisualMeasurement* Query::add_visual_measurements() {
  // @@protoc_insertion_point(field_add:proto.positioning.Query.visual_measurements)
  return _internal_add_visual_measurements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::positioning::VisualMeasurement >&
Query::visual_measurements() const {
  // @@protoc_insertion_point(field_list:proto.positioning.Query.visual_measurements)
  return visual_measurements_;
}

// repeated .google.protobuf.Any search_subsets = 5;
inline int Query::_internal_search_subsets_size() const {
  return search_subsets_.size();
}
inline int Query::search_subsets_size() const {
  return _internal_search_subsets_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* Query::mutable_search_subsets(int index) {
  // @@protoc_insertion_point(field_mutable:proto.positioning.Query.search_subsets)
  return search_subsets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
Query::mutable_search_subsets() {
  // @@protoc_insertion_point(field_mutable_list:proto.positioning.Query.search_subsets)
  return &search_subsets_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& Query::_internal_search_subsets(int index) const {
  return search_subsets_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Query::search_subsets(int index) const {
  // @@protoc_insertion_point(field_get:proto.positioning.Query.search_subsets)
  return _internal_search_subsets(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* Query::_internal_add_search_subsets() {
  return search_subsets_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* Query::add_search_subsets() {
  // @@protoc_insertion_point(field_add:proto.positioning.Query.search_subsets)
  return _internal_add_search_subsets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
Query::search_subsets() const {
  // @@protoc_insertion_point(field_list:proto.positioning.Query.search_subsets)
  return search_subsets_;
}

// -------------------------------------------------------------------

// PoseEstimate

// .proto.positioning.GeoPose geo_pose = 1;
inline bool PoseEstimate::_internal_has_geo_pose() const {
  return this != internal_default_instance() && geo_pose_ != nullptr;
}
inline bool PoseEstimate::has_geo_pose() const {
  return _internal_has_geo_pose();
}
inline void PoseEstimate::clear_geo_pose() {
  if (GetArena() == nullptr && geo_pose_ != nullptr) {
    delete geo_pose_;
  }
  geo_pose_ = nullptr;
}
inline const ::proto::positioning::GeoPose& PoseEstimate::_internal_geo_pose() const {
  const ::proto::positioning::GeoPose* p = geo_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::positioning::GeoPose*>(
      &::proto::positioning::_GeoPose_default_instance_);
}
inline const ::proto::positioning::GeoPose& PoseEstimate::geo_pose() const {
  // @@protoc_insertion_point(field_get:proto.positioning.PoseEstimate.geo_pose)
  return _internal_geo_pose();
}
inline void PoseEstimate::unsafe_arena_set_allocated_geo_pose(
    ::proto::positioning::GeoPose* geo_pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geo_pose_);
  }
  geo_pose_ = geo_pose;
  if (geo_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.positioning.PoseEstimate.geo_pose)
}
inline ::proto::positioning::GeoPose* PoseEstimate::release_geo_pose() {
  
  ::proto::positioning::GeoPose* temp = geo_pose_;
  geo_pose_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::positioning::GeoPose* PoseEstimate::unsafe_arena_release_geo_pose() {
  // @@protoc_insertion_point(field_release:proto.positioning.PoseEstimate.geo_pose)
  
  ::proto::positioning::GeoPose* temp = geo_pose_;
  geo_pose_ = nullptr;
  return temp;
}
inline ::proto::positioning::GeoPose* PoseEstimate::_internal_mutable_geo_pose() {
  
  if (geo_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::positioning::GeoPose>(GetArena());
    geo_pose_ = p;
  }
  return geo_pose_;
}
inline ::proto::positioning::GeoPose* PoseEstimate::mutable_geo_pose() {
  // @@protoc_insertion_point(field_mutable:proto.positioning.PoseEstimate.geo_pose)
  return _internal_mutable_geo_pose();
}
inline void PoseEstimate::set_allocated_geo_pose(::proto::positioning::GeoPose* geo_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete geo_pose_;
  }
  if (geo_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geo_pose);
    if (message_arena != submessage_arena) {
      geo_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo_pose, submessage_arena);
    }
    
  } else {
    
  }
  geo_pose_ = geo_pose;
  // @@protoc_insertion_point(field_set_allocated:proto.positioning.PoseEstimate.geo_pose)
}

// .proto.positioning.CartesianPose site_pose = 2;
inline bool PoseEstimate::_internal_has_site_pose() const {
  return this != internal_default_instance() && site_pose_ != nullptr;
}
inline bool PoseEstimate::has_site_pose() const {
  return _internal_has_site_pose();
}
inline void PoseEstimate::clear_site_pose() {
  if (GetArena() == nullptr && site_pose_ != nullptr) {
    delete site_pose_;
  }
  site_pose_ = nullptr;
}
inline const ::proto::positioning::CartesianPose& PoseEstimate::_internal_site_pose() const {
  const ::proto::positioning::CartesianPose* p = site_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::positioning::CartesianPose*>(
      &::proto::positioning::_CartesianPose_default_instance_);
}
inline const ::proto::positioning::CartesianPose& PoseEstimate::site_pose() const {
  // @@protoc_insertion_point(field_get:proto.positioning.PoseEstimate.site_pose)
  return _internal_site_pose();
}
inline void PoseEstimate::unsafe_arena_set_allocated_site_pose(
    ::proto::positioning::CartesianPose* site_pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(site_pose_);
  }
  site_pose_ = site_pose;
  if (site_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.positioning.PoseEstimate.site_pose)
}
inline ::proto::positioning::CartesianPose* PoseEstimate::release_site_pose() {
  
  ::proto::positioning::CartesianPose* temp = site_pose_;
  site_pose_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::positioning::CartesianPose* PoseEstimate::unsafe_arena_release_site_pose() {
  // @@protoc_insertion_point(field_release:proto.positioning.PoseEstimate.site_pose)
  
  ::proto::positioning::CartesianPose* temp = site_pose_;
  site_pose_ = nullptr;
  return temp;
}
inline ::proto::positioning::CartesianPose* PoseEstimate::_internal_mutable_site_pose() {
  
  if (site_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::positioning::CartesianPose>(GetArena());
    site_pose_ = p;
  }
  return site_pose_;
}
inline ::proto::positioning::CartesianPose* PoseEstimate::mutable_site_pose() {
  // @@protoc_insertion_point(field_mutable:proto.positioning.PoseEstimate.site_pose)
  return _internal_mutable_site_pose();
}
inline void PoseEstimate::set_allocated_site_pose(::proto::positioning::CartesianPose* site_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete site_pose_;
  }
  if (site_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(site_pose);
    if (message_arena != submessage_arena) {
      site_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site_pose, submessage_arena);
    }
    
  } else {
    
  }
  site_pose_ = site_pose;
  // @@protoc_insertion_point(field_set_allocated:proto.positioning.PoseEstimate.site_pose)
}

// -------------------------------------------------------------------

// Response

// string query_id = 1;
inline void Response::clear_query_id() {
  query_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Response::query_id() const {
  // @@protoc_insertion_point(field_get:proto.positioning.Response.query_id)
  return _internal_query_id();
}
inline void Response::set_query_id(const std::string& value) {
  _internal_set_query_id(value);
  // @@protoc_insertion_point(field_set:proto.positioning.Response.query_id)
}
inline std::string* Response::mutable_query_id() {
  // @@protoc_insertion_point(field_mutable:proto.positioning.Response.query_id)
  return _internal_mutable_query_id();
}
inline const std::string& Response::_internal_query_id() const {
  return query_id_.Get();
}
inline void Response::_internal_set_query_id(const std::string& value) {
  
  query_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response::set_query_id(std::string&& value) {
  
  query_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.positioning.Response.query_id)
}
inline void Response::set_query_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.positioning.Response.query_id)
}
inline void Response::set_query_id(const char* value,
    size_t size) {
  
  query_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.positioning.Response.query_id)
}
inline std::string* Response::_internal_mutable_query_id() {
  
  return query_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response::release_query_id() {
  // @@protoc_insertion_point(field_release:proto.positioning.Response.query_id)
  return query_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_query_id(std::string* query_id) {
  if (query_id != nullptr) {
    
  } else {
    
  }
  query_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.positioning.Response.query_id)
}

// .proto.positioning.PoseEstimate pose_estimate = 2;
inline bool Response::_internal_has_pose_estimate() const {
  return this != internal_default_instance() && pose_estimate_ != nullptr;
}
inline bool Response::has_pose_estimate() const {
  return _internal_has_pose_estimate();
}
inline void Response::clear_pose_estimate() {
  if (GetArena() == nullptr && pose_estimate_ != nullptr) {
    delete pose_estimate_;
  }
  pose_estimate_ = nullptr;
}
inline const ::proto::positioning::PoseEstimate& Response::_internal_pose_estimate() const {
  const ::proto::positioning::PoseEstimate* p = pose_estimate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::positioning::PoseEstimate*>(
      &::proto::positioning::_PoseEstimate_default_instance_);
}
inline const ::proto::positioning::PoseEstimate& Response::pose_estimate() const {
  // @@protoc_insertion_point(field_get:proto.positioning.Response.pose_estimate)
  return _internal_pose_estimate();
}
inline void Response::unsafe_arena_set_allocated_pose_estimate(
    ::proto::positioning::PoseEstimate* pose_estimate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_estimate_);
  }
  pose_estimate_ = pose_estimate;
  if (pose_estimate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.positioning.Response.pose_estimate)
}
inline ::proto::positioning::PoseEstimate* Response::release_pose_estimate() {
  
  ::proto::positioning::PoseEstimate* temp = pose_estimate_;
  pose_estimate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::positioning::PoseEstimate* Response::unsafe_arena_release_pose_estimate() {
  // @@protoc_insertion_point(field_release:proto.positioning.Response.pose_estimate)
  
  ::proto::positioning::PoseEstimate* temp = pose_estimate_;
  pose_estimate_ = nullptr;
  return temp;
}
inline ::proto::positioning::PoseEstimate* Response::_internal_mutable_pose_estimate() {
  
  if (pose_estimate_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::positioning::PoseEstimate>(GetArena());
    pose_estimate_ = p;
  }
  return pose_estimate_;
}
inline ::proto::positioning::PoseEstimate* Response::mutable_pose_estimate() {
  // @@protoc_insertion_point(field_mutable:proto.positioning.Response.pose_estimate)
  return _internal_mutable_pose_estimate();
}
inline void Response::set_allocated_pose_estimate(::proto::positioning::PoseEstimate* pose_estimate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_estimate_;
  }
  if (pose_estimate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose_estimate);
    if (message_arena != submessage_arena) {
      pose_estimate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_estimate, submessage_arena);
    }
    
  } else {
    
  }
  pose_estimate_ = pose_estimate;
  // @@protoc_insertion_point(field_set_allocated:proto.positioning.Response.pose_estimate)
}

// float confidence = 3;
inline void Response::clear_confidence() {
  confidence_ = 0;
}
inline float Response::_internal_confidence() const {
  return confidence_;
}
inline float Response::confidence() const {
  // @@protoc_insertion_point(field_get:proto.positioning.Response.confidence)
  return _internal_confidence();
}
inline void Response::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void Response::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:proto.positioning.Response.confidence)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace positioning
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_positioning_2eproto
