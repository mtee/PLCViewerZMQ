// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: positioning.proto

#include "positioning.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_positioning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BluetoothMeasurement_positioning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_positioning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraIntrinsics_positioning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_positioning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CartesianLocation_positioning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_positioning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CartesianPose_positioning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_positioning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoLocation3D_positioning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_positioning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GeoPose_positioning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_positioning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PolygonSearchSubset_GeoLocation2D_positioning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_positioning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PoseEstimate_positioning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_positioning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_positioning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_positioning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VisualMeasurement_positioning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_positioning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WifiNetworkMeasurement_positioning_2eproto;
namespace proto {
namespace positioning {
class CartesianLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CartesianLocation> _instance;
} _CartesianLocation_default_instance_;
class GeoLocation3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoLocation3D> _instance;
} _GeoLocation3D_default_instance_;
class QuaternionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Quaternion> _instance;
} _Quaternion_default_instance_;
class CartesianPoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CartesianPose> _instance;
} _CartesianPose_default_instance_;
class GeoPoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoPose> _instance;
} _GeoPose_default_instance_;
class PolygonSearchSubset_GeoLocation2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolygonSearchSubset_GeoLocation2D> _instance;
} _PolygonSearchSubset_GeoLocation2D_default_instance_;
class PolygonSearchSubsetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolygonSearchSubset> _instance;
} _PolygonSearchSubset_default_instance_;
class CylinderSearchSubsetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CylinderSearchSubset> _instance;
} _CylinderSearchSubset_default_instance_;
class WifiNetworkMeasurementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WifiNetworkMeasurement> _instance;
} _WifiNetworkMeasurement_default_instance_;
class BluetoothMeasurementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BluetoothMeasurement> _instance;
} _BluetoothMeasurement_default_instance_;
class CameraIntrinsicsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraIntrinsics> _instance;
} _CameraIntrinsics_default_instance_;
class VisualMeasurementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisualMeasurement> _instance;
} _VisualMeasurement_default_instance_;
class QueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Query> _instance;
} _Query_default_instance_;
class PoseEstimateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoseEstimate> _instance;
} _PoseEstimate_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response> _instance;
} _Response_default_instance_;
}  // namespace positioning
}  // namespace proto
static void InitDefaultsscc_info_BluetoothMeasurement_positioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::positioning::_BluetoothMeasurement_default_instance_;
    new (ptr) ::proto::positioning::BluetoothMeasurement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::positioning::BluetoothMeasurement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BluetoothMeasurement_positioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BluetoothMeasurement_positioning_2eproto}, {}};

static void InitDefaultsscc_info_CameraIntrinsics_positioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::positioning::_CameraIntrinsics_default_instance_;
    new (ptr) ::proto::positioning::CameraIntrinsics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::positioning::CameraIntrinsics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraIntrinsics_positioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CameraIntrinsics_positioning_2eproto}, {}};

static void InitDefaultsscc_info_CartesianLocation_positioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::positioning::_CartesianLocation_default_instance_;
    new (ptr) ::proto::positioning::CartesianLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::positioning::CartesianLocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CartesianLocation_positioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CartesianLocation_positioning_2eproto}, {}};

static void InitDefaultsscc_info_CartesianPose_positioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::positioning::_CartesianPose_default_instance_;
    new (ptr) ::proto::positioning::CartesianPose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::positioning::CartesianPose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CartesianPose_positioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CartesianPose_positioning_2eproto}, {
      &scc_info_CartesianLocation_positioning_2eproto.base,
      &scc_info_Quaternion_positioning_2eproto.base,}};

static void InitDefaultsscc_info_CylinderSearchSubset_positioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::positioning::_CylinderSearchSubset_default_instance_;
    new (ptr) ::proto::positioning::CylinderSearchSubset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::positioning::CylinderSearchSubset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CylinderSearchSubset_positioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CylinderSearchSubset_positioning_2eproto}, {
      &scc_info_GeoLocation3D_positioning_2eproto.base,
      &scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_GeoLocation3D_positioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::positioning::_GeoLocation3D_default_instance_;
    new (ptr) ::proto::positioning::GeoLocation3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::positioning::GeoLocation3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoLocation3D_positioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GeoLocation3D_positioning_2eproto}, {}};

static void InitDefaultsscc_info_GeoPose_positioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::positioning::_GeoPose_default_instance_;
    new (ptr) ::proto::positioning::GeoPose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::positioning::GeoPose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GeoPose_positioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GeoPose_positioning_2eproto}, {
      &scc_info_GeoLocation3D_positioning_2eproto.base,
      &scc_info_Quaternion_positioning_2eproto.base,}};

static void InitDefaultsscc_info_PolygonSearchSubset_positioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::positioning::_PolygonSearchSubset_default_instance_;
    new (ptr) ::proto::positioning::PolygonSearchSubset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::positioning::PolygonSearchSubset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PolygonSearchSubset_positioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PolygonSearchSubset_positioning_2eproto}, {
      &scc_info_PolygonSearchSubset_GeoLocation2D_positioning_2eproto.base,
      &scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_PolygonSearchSubset_GeoLocation2D_positioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::positioning::_PolygonSearchSubset_GeoLocation2D_default_instance_;
    new (ptr) ::proto::positioning::PolygonSearchSubset_GeoLocation2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::positioning::PolygonSearchSubset_GeoLocation2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PolygonSearchSubset_GeoLocation2D_positioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PolygonSearchSubset_GeoLocation2D_positioning_2eproto}, {}};

static void InitDefaultsscc_info_PoseEstimate_positioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::positioning::_PoseEstimate_default_instance_;
    new (ptr) ::proto::positioning::PoseEstimate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::positioning::PoseEstimate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PoseEstimate_positioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PoseEstimate_positioning_2eproto}, {
      &scc_info_GeoPose_positioning_2eproto.base,
      &scc_info_CartesianPose_positioning_2eproto.base,}};

static void InitDefaultsscc_info_Quaternion_positioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::positioning::_Quaternion_default_instance_;
    new (ptr) ::proto::positioning::Quaternion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::positioning::Quaternion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_positioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Quaternion_positioning_2eproto}, {}};

static void InitDefaultsscc_info_Query_positioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::positioning::_Query_default_instance_;
    new (ptr) ::proto::positioning::Query();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::positioning::Query::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Query_positioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Query_positioning_2eproto}, {
      &scc_info_WifiNetworkMeasurement_positioning_2eproto.base,
      &scc_info_BluetoothMeasurement_positioning_2eproto.base,
      &scc_info_VisualMeasurement_positioning_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_Response_positioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::positioning::_Response_default_instance_;
    new (ptr) ::proto::positioning::Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::positioning::Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Response_positioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Response_positioning_2eproto}, {
      &scc_info_PoseEstimate_positioning_2eproto.base,}};

static void InitDefaultsscc_info_VisualMeasurement_positioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::positioning::_VisualMeasurement_default_instance_;
    new (ptr) ::proto::positioning::VisualMeasurement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::positioning::VisualMeasurement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VisualMeasurement_positioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VisualMeasurement_positioning_2eproto}, {
      &scc_info_CameraIntrinsics_positioning_2eproto.base,
      &scc_info_CartesianPose_positioning_2eproto.base,}};

static void InitDefaultsscc_info_WifiNetworkMeasurement_positioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::positioning::_WifiNetworkMeasurement_default_instance_;
    new (ptr) ::proto::positioning::WifiNetworkMeasurement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::positioning::WifiNetworkMeasurement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WifiNetworkMeasurement_positioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WifiNetworkMeasurement_positioning_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_positioning_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_positioning_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_positioning_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_positioning_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::CartesianLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::CartesianLocation, x_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::CartesianLocation, y_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::CartesianLocation, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::GeoLocation3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::GeoLocation3D, longitude_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::GeoLocation3D, latitude_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::GeoLocation3D, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::Quaternion, x_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::Quaternion, y_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::Quaternion, z_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::Quaternion, w_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::CartesianPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::CartesianPose, location_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::CartesianPose, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::GeoPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::GeoPose, location_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::GeoPose, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::PolygonSearchSubset_GeoLocation2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::PolygonSearchSubset_GeoLocation2D, longitude_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::PolygonSearchSubset_GeoLocation2D, latitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::PolygonSearchSubset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::PolygonSearchSubset, points_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::PolygonSearchSubset, z_from_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::PolygonSearchSubset, z_to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::CylinderSearchSubset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::CylinderSearchSubset, center_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::CylinderSearchSubset, radius_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::CylinderSearchSubset, z_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::WifiNetworkMeasurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::WifiNetworkMeasurement, mac_address_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::WifiNetworkMeasurement, frequency_mhz_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::WifiNetworkMeasurement, level_db_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::WifiNetworkMeasurement, ssid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::BluetoothMeasurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::BluetoothMeasurement, mac_address_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::BluetoothMeasurement, level_db_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::CameraIntrinsics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::CameraIntrinsics, fx_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::CameraIntrinsics, fy_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::CameraIntrinsics, px_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::CameraIntrinsics, py_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::VisualMeasurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::VisualMeasurement, picture_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::VisualMeasurement, camera_intrinsics_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::VisualMeasurement, relative_camera_pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::Query, query_id_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::Query, wifi_measurements_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::Query, bluetooth_measurements_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::Query, visual_measurements_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::Query, search_subsets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::PoseEstimate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::PoseEstimate, geo_pose_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::PoseEstimate, site_pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::positioning::Response, query_id_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::Response, pose_estimate_),
  PROTOBUF_FIELD_OFFSET(::proto::positioning::Response, confidence_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto::positioning::CartesianLocation)},
  { 8, -1, sizeof(::proto::positioning::GeoLocation3D)},
  { 16, -1, sizeof(::proto::positioning::Quaternion)},
  { 25, -1, sizeof(::proto::positioning::CartesianPose)},
  { 32, -1, sizeof(::proto::positioning::GeoPose)},
  { 39, -1, sizeof(::proto::positioning::PolygonSearchSubset_GeoLocation2D)},
  { 46, -1, sizeof(::proto::positioning::PolygonSearchSubset)},
  { 54, -1, sizeof(::proto::positioning::CylinderSearchSubset)},
  { 62, -1, sizeof(::proto::positioning::WifiNetworkMeasurement)},
  { 71, -1, sizeof(::proto::positioning::BluetoothMeasurement)},
  { 78, -1, sizeof(::proto::positioning::CameraIntrinsics)},
  { 87, -1, sizeof(::proto::positioning::VisualMeasurement)},
  { 95, -1, sizeof(::proto::positioning::Query)},
  { 105, -1, sizeof(::proto::positioning::PoseEstimate)},
  { 112, -1, sizeof(::proto::positioning::Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::positioning::_CartesianLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::positioning::_GeoLocation3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::positioning::_Quaternion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::positioning::_CartesianPose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::positioning::_GeoPose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::positioning::_PolygonSearchSubset_GeoLocation2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::positioning::_PolygonSearchSubset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::positioning::_CylinderSearchSubset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::positioning::_WifiNetworkMeasurement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::positioning::_BluetoothMeasurement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::positioning::_CameraIntrinsics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::positioning::_VisualMeasurement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::positioning::_Query_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::positioning::_PoseEstimate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::positioning::_Response_default_instance_),
};

const char descriptor_table_protodef_positioning_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021positioning.proto\022\021proto.positioning\032\036"
  "google/protobuf/wrappers.proto\032\031google/p"
  "rotobuf/any.proto\"4\n\021CartesianLocation\022\t"
  "\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\?\n\rGeoLo"
  "cation3D\022\021\n\tlongitude\030\001 \001(\001\022\020\n\010latitude\030"
  "\002 \001(\001\022\t\n\001z\030\003 \001(\002\"8\n\nQuaternion\022\t\n\001x\030\001 \001("
  "\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\t\n\001w\030\004 \001(\002\"{\n\rCa"
  "rtesianPose\0226\n\010location\030\001 \001(\0132$.proto.po"
  "sitioning.CartesianLocation\0222\n\013orientati"
  "on\030\002 \001(\0132\035.proto.positioning.Quaternion\""
  "q\n\007GeoPose\0222\n\010location\030\001 \001(\0132 .proto.pos"
  "itioning.GeoLocation3D\0222\n\013orientation\030\002 "
  "\001(\0132\035.proto.positioning.Quaternion\"\351\001\n\023P"
  "olygonSearchSubset\022D\n\006points\030\001 \003(\01324.pro"
  "to.positioning.PolygonSearchSubset.GeoLo"
  "cation2D\022+\n\006z_from\030\002 \001(\0132\033.google.protob"
  "uf.FloatValue\022)\n\004z_to\030\003 \001(\0132\033.google.pro"
  "tobuf.FloatValue\0324\n\rGeoLocation2D\022\021\n\tlon"
  "gitude\030\001 \001(\001\022\020\n\010latitude\030\002 \001(\001\"\207\001\n\024Cylin"
  "derSearchSubset\0220\n\006center\030\001 \001(\0132 .proto."
  "positioning.GeoLocation3D\022\016\n\006radius\030\002 \001("
  "\002\022-\n\010z_offset\030\003 \001(\0132\033.google.protobuf.Fl"
  "oatValue\"d\n\026WifiNetworkMeasurement\022\023\n\013ma"
  "c_address\030\001 \001(\t\022\025\n\rfrequency_mhz\030\002 \001(\005\022\020"
  "\n\010level_db\030\003 \001(\005\022\014\n\004ssid\030\004 \001(\t\"=\n\024Blueto"
  "othMeasurement\022\023\n\013mac_address\030\001 \001(\t\022\020\n\010l"
  "evel_db\030\002 \001(\005\"B\n\020CameraIntrinsics\022\n\n\002fx\030"
  "\001 \001(\002\022\n\n\002fy\030\002 \001(\002\022\n\n\002px\030\003 \001(\002\022\n\n\002py\030\004 \001("
  "\002\"\244\001\n\021VisualMeasurement\022\017\n\007picture\030\001 \001(\014"
  "\022>\n\021camera_intrinsics\030\002 \001(\0132#.proto.posi"
  "tioning.CameraIntrinsics\022>\n\024relative_cam"
  "era_pose\030\003 \001(\0132 .proto.positioning.Carte"
  "sianPose\"\231\002\n\005Query\022\020\n\010query_id\030\001 \001(\t\022D\n\021"
  "wifi_measurements\030\002 \003(\0132).proto.position"
  "ing.WifiNetworkMeasurement\022G\n\026bluetooth_"
  "measurements\030\003 \003(\0132\'.proto.positioning.B"
  "luetoothMeasurement\022A\n\023visual_measuremen"
  "ts\030\004 \003(\0132$.proto.positioning.VisualMeasu"
  "rement\022,\n\016search_subsets\030\005 \003(\0132\024.google."
  "protobuf.Any\"q\n\014PoseEstimate\022,\n\010geo_pose"
  "\030\001 \001(\0132\032.proto.positioning.GeoPose\0223\n\tsi"
  "te_pose\030\002 \001(\0132 .proto.positioning.Cartes"
  "ianPose\"h\n\010Response\022\020\n\010query_id\030\001 \001(\t\0226\n"
  "\rpose_estimate\030\002 \001(\0132\037.proto.positioning"
  ".PoseEstimate\022\022\n\nconfidence\030\003 \001(\002b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_positioning_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_positioning_2eproto_sccs[15] = {
  &scc_info_BluetoothMeasurement_positioning_2eproto.base,
  &scc_info_CameraIntrinsics_positioning_2eproto.base,
  &scc_info_CartesianLocation_positioning_2eproto.base,
  &scc_info_CartesianPose_positioning_2eproto.base,
  &scc_info_CylinderSearchSubset_positioning_2eproto.base,
  &scc_info_GeoLocation3D_positioning_2eproto.base,
  &scc_info_GeoPose_positioning_2eproto.base,
  &scc_info_PolygonSearchSubset_positioning_2eproto.base,
  &scc_info_PolygonSearchSubset_GeoLocation2D_positioning_2eproto.base,
  &scc_info_PoseEstimate_positioning_2eproto.base,
  &scc_info_Quaternion_positioning_2eproto.base,
  &scc_info_Query_positioning_2eproto.base,
  &scc_info_Response_positioning_2eproto.base,
  &scc_info_VisualMeasurement_positioning_2eproto.base,
  &scc_info_WifiNetworkMeasurement_positioning_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_positioning_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_positioning_2eproto = {
  false, false, descriptor_table_protodef_positioning_2eproto, "positioning.proto", 1801,
  &descriptor_table_positioning_2eproto_once, descriptor_table_positioning_2eproto_sccs, descriptor_table_positioning_2eproto_deps, 15, 2,
  schemas, file_default_instances, TableStruct_positioning_2eproto::offsets,
  file_level_metadata_positioning_2eproto, 15, file_level_enum_descriptors_positioning_2eproto, file_level_service_descriptors_positioning_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_positioning_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_positioning_2eproto)), true);
namespace proto {
namespace positioning {

// ===================================================================

void CartesianLocation::InitAsDefaultInstance() {
}
class CartesianLocation::_Internal {
 public:
};

CartesianLocation::CartesianLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.positioning.CartesianLocation)
}
CartesianLocation::CartesianLocation(const CartesianLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:proto.positioning.CartesianLocation)
}

void CartesianLocation::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

CartesianLocation::~CartesianLocation() {
  // @@protoc_insertion_point(destructor:proto.positioning.CartesianLocation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CartesianLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CartesianLocation::ArenaDtor(void* object) {
  CartesianLocation* _this = reinterpret_cast< CartesianLocation* >(object);
  (void)_this;
}
void CartesianLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CartesianLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CartesianLocation& CartesianLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CartesianLocation_positioning_2eproto.base);
  return *internal_default_instance();
}


void CartesianLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.positioning.CartesianLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CartesianLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CartesianLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.positioning.CartesianLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.positioning.CartesianLocation)
  return target;
}

size_t CartesianLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.positioning.CartesianLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CartesianLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.positioning.CartesianLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const CartesianLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CartesianLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.positioning.CartesianLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.positioning.CartesianLocation)
    MergeFrom(*source);
  }
}

void CartesianLocation::MergeFrom(const CartesianLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.positioning.CartesianLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void CartesianLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.positioning.CartesianLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CartesianLocation::CopyFrom(const CartesianLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.positioning.CartesianLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CartesianLocation::IsInitialized() const {
  return true;
}

void CartesianLocation::InternalSwap(CartesianLocation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CartesianLocation, z_)
      + sizeof(CartesianLocation::z_)
      - PROTOBUF_FIELD_OFFSET(CartesianLocation, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CartesianLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoLocation3D::InitAsDefaultInstance() {
}
class GeoLocation3D::_Internal {
 public:
};

GeoLocation3D::GeoLocation3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.positioning.GeoLocation3D)
}
GeoLocation3D::GeoLocation3D(const GeoLocation3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:proto.positioning.GeoLocation3D)
}

void GeoLocation3D::SharedCtor() {
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(z_));
}

GeoLocation3D::~GeoLocation3D() {
  // @@protoc_insertion_point(destructor:proto.positioning.GeoLocation3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeoLocation3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GeoLocation3D::ArenaDtor(void* object) {
  GeoLocation3D* _this = reinterpret_cast< GeoLocation3D* >(object);
  (void)_this;
}
void GeoLocation3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoLocation3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoLocation3D& GeoLocation3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoLocation3D_positioning_2eproto.base);
  return *internal_default_instance();
}


void GeoLocation3D::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.positioning.GeoLocation3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoLocation3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoLocation3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.positioning.GeoLocation3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_longitude(), target);
  }

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.positioning.GeoLocation3D)
  return target;
}

size_t GeoLocation3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.positioning.GeoLocation3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double longitude = 1;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoLocation3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.positioning.GeoLocation3D)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoLocation3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoLocation3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.positioning.GeoLocation3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.positioning.GeoLocation3D)
    MergeFrom(*source);
  }
}

void GeoLocation3D::MergeFrom(const GeoLocation3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.positioning.GeoLocation3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void GeoLocation3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.positioning.GeoLocation3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoLocation3D::CopyFrom(const GeoLocation3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.positioning.GeoLocation3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoLocation3D::IsInitialized() const {
  return true;
}

void GeoLocation3D::InternalSwap(GeoLocation3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoLocation3D, z_)
      + sizeof(GeoLocation3D::z_)
      - PROTOBUF_FIELD_OFFSET(GeoLocation3D, longitude_)>(
          reinterpret_cast<char*>(&longitude_),
          reinterpret_cast<char*>(&other->longitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoLocation3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Quaternion::InitAsDefaultInstance() {
}
class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.positioning.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:proto.positioning.Quaternion)
}

void Quaternion::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:proto.positioning.Quaternion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Quaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Quaternion::ArenaDtor(void* object) {
  Quaternion* _this = reinterpret_cast< Quaternion* >(object);
  (void)_this;
}
void Quaternion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Quaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Quaternion& Quaternion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Quaternion_positioning_2eproto.base);
  return *internal_default_instance();
}


void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.positioning.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quaternion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.positioning.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // float w = 4;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.positioning.Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.positioning.Quaternion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // float w = 4;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quaternion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.positioning.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaternion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Quaternion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.positioning.Quaternion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.positioning.Quaternion)
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.positioning.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
}

void Quaternion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.positioning.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.positioning.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, w_)
      + sizeof(Quaternion::w_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaternion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CartesianPose::InitAsDefaultInstance() {
  ::proto::positioning::_CartesianPose_default_instance_._instance.get_mutable()->location_ = const_cast< ::proto::positioning::CartesianLocation*>(
      ::proto::positioning::CartesianLocation::internal_default_instance());
  ::proto::positioning::_CartesianPose_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::proto::positioning::Quaternion*>(
      ::proto::positioning::Quaternion::internal_default_instance());
}
class CartesianPose::_Internal {
 public:
  static const ::proto::positioning::CartesianLocation& location(const CartesianPose* msg);
  static const ::proto::positioning::Quaternion& orientation(const CartesianPose* msg);
};

const ::proto::positioning::CartesianLocation&
CartesianPose::_Internal::location(const CartesianPose* msg) {
  return *msg->location_;
}
const ::proto::positioning::Quaternion&
CartesianPose::_Internal::orientation(const CartesianPose* msg) {
  return *msg->orientation_;
}
CartesianPose::CartesianPose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.positioning.CartesianPose)
}
CartesianPose::CartesianPose(const CartesianPose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::proto::positioning::CartesianLocation(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::proto::positioning::Quaternion(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.positioning.CartesianPose)
}

void CartesianPose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CartesianPose_positioning_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&location_)) + sizeof(orientation_));
}

CartesianPose::~CartesianPose() {
  // @@protoc_insertion_point(destructor:proto.positioning.CartesianPose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CartesianPose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete orientation_;
}

void CartesianPose::ArenaDtor(void* object) {
  CartesianPose* _this = reinterpret_cast< CartesianPose* >(object);
  (void)_this;
}
void CartesianPose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CartesianPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CartesianPose& CartesianPose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CartesianPose_positioning_2eproto.base);
  return *internal_default_instance();
}


void CartesianPose::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.positioning.CartesianPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CartesianPose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto.positioning.CartesianLocation location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.positioning.Quaternion orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CartesianPose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.positioning.CartesianPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.positioning.CartesianLocation location = 1;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::location(this), target, stream);
  }

  // .proto.positioning.Quaternion orientation = 2;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::orientation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.positioning.CartesianPose)
  return target;
}

size_t CartesianPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.positioning.CartesianPose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.positioning.CartesianLocation location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .proto.positioning.Quaternion orientation = 2;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CartesianPose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.positioning.CartesianPose)
  GOOGLE_DCHECK_NE(&from, this);
  const CartesianPose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CartesianPose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.positioning.CartesianPose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.positioning.CartesianPose)
    MergeFrom(*source);
  }
}

void CartesianPose::MergeFrom(const CartesianPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.positioning.CartesianPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    _internal_mutable_location()->::proto::positioning::CartesianLocation::MergeFrom(from._internal_location());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::proto::positioning::Quaternion::MergeFrom(from._internal_orientation());
  }
}

void CartesianPose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.positioning.CartesianPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CartesianPose::CopyFrom(const CartesianPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.positioning.CartesianPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CartesianPose::IsInitialized() const {
  return true;
}

void CartesianPose::InternalSwap(CartesianPose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CartesianPose, orientation_)
      + sizeof(CartesianPose::orientation_)
      - PROTOBUF_FIELD_OFFSET(CartesianPose, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CartesianPose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoPose::InitAsDefaultInstance() {
  ::proto::positioning::_GeoPose_default_instance_._instance.get_mutable()->location_ = const_cast< ::proto::positioning::GeoLocation3D*>(
      ::proto::positioning::GeoLocation3D::internal_default_instance());
  ::proto::positioning::_GeoPose_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::proto::positioning::Quaternion*>(
      ::proto::positioning::Quaternion::internal_default_instance());
}
class GeoPose::_Internal {
 public:
  static const ::proto::positioning::GeoLocation3D& location(const GeoPose* msg);
  static const ::proto::positioning::Quaternion& orientation(const GeoPose* msg);
};

const ::proto::positioning::GeoLocation3D&
GeoPose::_Internal::location(const GeoPose* msg) {
  return *msg->location_;
}
const ::proto::positioning::Quaternion&
GeoPose::_Internal::orientation(const GeoPose* msg) {
  return *msg->orientation_;
}
GeoPose::GeoPose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.positioning.GeoPose)
}
GeoPose::GeoPose(const GeoPose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::proto::positioning::GeoLocation3D(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::proto::positioning::Quaternion(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.positioning.GeoPose)
}

void GeoPose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoPose_positioning_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&location_)) + sizeof(orientation_));
}

GeoPose::~GeoPose() {
  // @@protoc_insertion_point(destructor:proto.positioning.GeoPose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeoPose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete orientation_;
}

void GeoPose::ArenaDtor(void* object) {
  GeoPose* _this = reinterpret_cast< GeoPose* >(object);
  (void)_this;
}
void GeoPose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoPose& GeoPose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoPose_positioning_2eproto.base);
  return *internal_default_instance();
}


void GeoPose::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.positioning.GeoPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoPose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto.positioning.GeoLocation3D location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.positioning.Quaternion orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoPose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.positioning.GeoPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.positioning.GeoLocation3D location = 1;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::location(this), target, stream);
  }

  // .proto.positioning.Quaternion orientation = 2;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::orientation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.positioning.GeoPose)
  return target;
}

size_t GeoPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.positioning.GeoPose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.positioning.GeoLocation3D location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .proto.positioning.Quaternion orientation = 2;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoPose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.positioning.GeoPose)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoPose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoPose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.positioning.GeoPose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.positioning.GeoPose)
    MergeFrom(*source);
  }
}

void GeoPose::MergeFrom(const GeoPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.positioning.GeoPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    _internal_mutable_location()->::proto::positioning::GeoLocation3D::MergeFrom(from._internal_location());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::proto::positioning::Quaternion::MergeFrom(from._internal_orientation());
  }
}

void GeoPose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.positioning.GeoPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoPose::CopyFrom(const GeoPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.positioning.GeoPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoPose::IsInitialized() const {
  return true;
}

void GeoPose::InternalSwap(GeoPose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoPose, orientation_)
      + sizeof(GeoPose::orientation_)
      - PROTOBUF_FIELD_OFFSET(GeoPose, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoPose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PolygonSearchSubset_GeoLocation2D::InitAsDefaultInstance() {
}
class PolygonSearchSubset_GeoLocation2D::_Internal {
 public:
};

PolygonSearchSubset_GeoLocation2D::PolygonSearchSubset_GeoLocation2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.positioning.PolygonSearchSubset.GeoLocation2D)
}
PolygonSearchSubset_GeoLocation2D::PolygonSearchSubset_GeoLocation2D(const PolygonSearchSubset_GeoLocation2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:proto.positioning.PolygonSearchSubset.GeoLocation2D)
}

void PolygonSearchSubset_GeoLocation2D::SharedCtor() {
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
}

PolygonSearchSubset_GeoLocation2D::~PolygonSearchSubset_GeoLocation2D() {
  // @@protoc_insertion_point(destructor:proto.positioning.PolygonSearchSubset.GeoLocation2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PolygonSearchSubset_GeoLocation2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PolygonSearchSubset_GeoLocation2D::ArenaDtor(void* object) {
  PolygonSearchSubset_GeoLocation2D* _this = reinterpret_cast< PolygonSearchSubset_GeoLocation2D* >(object);
  (void)_this;
}
void PolygonSearchSubset_GeoLocation2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolygonSearchSubset_GeoLocation2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolygonSearchSubset_GeoLocation2D& PolygonSearchSubset_GeoLocation2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolygonSearchSubset_GeoLocation2D_positioning_2eproto.base);
  return *internal_default_instance();
}


void PolygonSearchSubset_GeoLocation2D::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.positioning.PolygonSearchSubset.GeoLocation2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolygonSearchSubset_GeoLocation2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PolygonSearchSubset_GeoLocation2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.positioning.PolygonSearchSubset.GeoLocation2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_longitude(), target);
  }

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.positioning.PolygonSearchSubset.GeoLocation2D)
  return target;
}

size_t PolygonSearchSubset_GeoLocation2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.positioning.PolygonSearchSubset.GeoLocation2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double longitude = 1;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolygonSearchSubset_GeoLocation2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.positioning.PolygonSearchSubset.GeoLocation2D)
  GOOGLE_DCHECK_NE(&from, this);
  const PolygonSearchSubset_GeoLocation2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PolygonSearchSubset_GeoLocation2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.positioning.PolygonSearchSubset.GeoLocation2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.positioning.PolygonSearchSubset.GeoLocation2D)
    MergeFrom(*source);
  }
}

void PolygonSearchSubset_GeoLocation2D::MergeFrom(const PolygonSearchSubset_GeoLocation2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.positioning.PolygonSearchSubset.GeoLocation2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
}

void PolygonSearchSubset_GeoLocation2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.positioning.PolygonSearchSubset.GeoLocation2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolygonSearchSubset_GeoLocation2D::CopyFrom(const PolygonSearchSubset_GeoLocation2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.positioning.PolygonSearchSubset.GeoLocation2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolygonSearchSubset_GeoLocation2D::IsInitialized() const {
  return true;
}

void PolygonSearchSubset_GeoLocation2D::InternalSwap(PolygonSearchSubset_GeoLocation2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolygonSearchSubset_GeoLocation2D, latitude_)
      + sizeof(PolygonSearchSubset_GeoLocation2D::latitude_)
      - PROTOBUF_FIELD_OFFSET(PolygonSearchSubset_GeoLocation2D, longitude_)>(
          reinterpret_cast<char*>(&longitude_),
          reinterpret_cast<char*>(&other->longitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PolygonSearchSubset_GeoLocation2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PolygonSearchSubset::InitAsDefaultInstance() {
  ::proto::positioning::_PolygonSearchSubset_default_instance_._instance.get_mutable()->z_from_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::proto::positioning::_PolygonSearchSubset_default_instance_._instance.get_mutable()->z_to_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
}
class PolygonSearchSubset::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::FloatValue& z_from(const PolygonSearchSubset* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& z_to(const PolygonSearchSubset* msg);
};

const PROTOBUF_NAMESPACE_ID::FloatValue&
PolygonSearchSubset::_Internal::z_from(const PolygonSearchSubset* msg) {
  return *msg->z_from_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
PolygonSearchSubset::_Internal::z_to(const PolygonSearchSubset* msg) {
  return *msg->z_to_;
}
void PolygonSearchSubset::clear_z_from() {
  if (GetArena() == nullptr && z_from_ != nullptr) {
    delete z_from_;
  }
  z_from_ = nullptr;
}
void PolygonSearchSubset::clear_z_to() {
  if (GetArena() == nullptr && z_to_ != nullptr) {
    delete z_to_;
  }
  z_to_ = nullptr;
}
PolygonSearchSubset::PolygonSearchSubset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.positioning.PolygonSearchSubset)
}
PolygonSearchSubset::PolygonSearchSubset(const PolygonSearchSubset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_z_from()) {
    z_from_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.z_from_);
  } else {
    z_from_ = nullptr;
  }
  if (from._internal_has_z_to()) {
    z_to_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.z_to_);
  } else {
    z_to_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.positioning.PolygonSearchSubset)
}

void PolygonSearchSubset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PolygonSearchSubset_positioning_2eproto.base);
  ::memset(&z_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_to_) -
      reinterpret_cast<char*>(&z_from_)) + sizeof(z_to_));
}

PolygonSearchSubset::~PolygonSearchSubset() {
  // @@protoc_insertion_point(destructor:proto.positioning.PolygonSearchSubset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PolygonSearchSubset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete z_from_;
  if (this != internal_default_instance()) delete z_to_;
}

void PolygonSearchSubset::ArenaDtor(void* object) {
  PolygonSearchSubset* _this = reinterpret_cast< PolygonSearchSubset* >(object);
  (void)_this;
}
void PolygonSearchSubset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolygonSearchSubset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolygonSearchSubset& PolygonSearchSubset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolygonSearchSubset_positioning_2eproto.base);
  return *internal_default_instance();
}


void PolygonSearchSubset::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.positioning.PolygonSearchSubset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  if (GetArena() == nullptr && z_from_ != nullptr) {
    delete z_from_;
  }
  z_from_ = nullptr;
  if (GetArena() == nullptr && z_to_ != nullptr) {
    delete z_to_;
  }
  z_to_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolygonSearchSubset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .proto.positioning.PolygonSearchSubset.GeoLocation2D points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue z_from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_z_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue z_to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_z_to(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PolygonSearchSubset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.positioning.PolygonSearchSubset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.positioning.PolygonSearchSubset.GeoLocation2D points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  // .google.protobuf.FloatValue z_from = 2;
  if (this->has_z_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::z_from(this), target, stream);
  }

  // .google.protobuf.FloatValue z_to = 3;
  if (this->has_z_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::z_to(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.positioning.PolygonSearchSubset)
  return target;
}

size_t PolygonSearchSubset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.positioning.PolygonSearchSubset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.positioning.PolygonSearchSubset.GeoLocation2D points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.FloatValue z_from = 2;
  if (this->has_z_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *z_from_);
  }

  // .google.protobuf.FloatValue z_to = 3;
  if (this->has_z_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *z_to_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolygonSearchSubset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.positioning.PolygonSearchSubset)
  GOOGLE_DCHECK_NE(&from, this);
  const PolygonSearchSubset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PolygonSearchSubset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.positioning.PolygonSearchSubset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.positioning.PolygonSearchSubset)
    MergeFrom(*source);
  }
}

void PolygonSearchSubset::MergeFrom(const PolygonSearchSubset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.positioning.PolygonSearchSubset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.has_z_from()) {
    _internal_mutable_z_from()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_z_from());
  }
  if (from.has_z_to()) {
    _internal_mutable_z_to()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_z_to());
  }
}

void PolygonSearchSubset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.positioning.PolygonSearchSubset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolygonSearchSubset::CopyFrom(const PolygonSearchSubset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.positioning.PolygonSearchSubset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolygonSearchSubset::IsInitialized() const {
  return true;
}

void PolygonSearchSubset::InternalSwap(PolygonSearchSubset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolygonSearchSubset, z_to_)
      + sizeof(PolygonSearchSubset::z_to_)
      - PROTOBUF_FIELD_OFFSET(PolygonSearchSubset, z_from_)>(
          reinterpret_cast<char*>(&z_from_),
          reinterpret_cast<char*>(&other->z_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PolygonSearchSubset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CylinderSearchSubset::InitAsDefaultInstance() {
  ::proto::positioning::_CylinderSearchSubset_default_instance_._instance.get_mutable()->center_ = const_cast< ::proto::positioning::GeoLocation3D*>(
      ::proto::positioning::GeoLocation3D::internal_default_instance());
  ::proto::positioning::_CylinderSearchSubset_default_instance_._instance.get_mutable()->z_offset_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
}
class CylinderSearchSubset::_Internal {
 public:
  static const ::proto::positioning::GeoLocation3D& center(const CylinderSearchSubset* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& z_offset(const CylinderSearchSubset* msg);
};

const ::proto::positioning::GeoLocation3D&
CylinderSearchSubset::_Internal::center(const CylinderSearchSubset* msg) {
  return *msg->center_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
CylinderSearchSubset::_Internal::z_offset(const CylinderSearchSubset* msg) {
  return *msg->z_offset_;
}
void CylinderSearchSubset::clear_z_offset() {
  if (GetArena() == nullptr && z_offset_ != nullptr) {
    delete z_offset_;
  }
  z_offset_ = nullptr;
}
CylinderSearchSubset::CylinderSearchSubset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.positioning.CylinderSearchSubset)
}
CylinderSearchSubset::CylinderSearchSubset(const CylinderSearchSubset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::proto::positioning::GeoLocation3D(*from.center_);
  } else {
    center_ = nullptr;
  }
  if (from._internal_has_z_offset()) {
    z_offset_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.z_offset_);
  } else {
    z_offset_ = nullptr;
  }
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:proto.positioning.CylinderSearchSubset)
}

void CylinderSearchSubset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CylinderSearchSubset_positioning_2eproto.base);
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&center_)) + sizeof(radius_));
}

CylinderSearchSubset::~CylinderSearchSubset() {
  // @@protoc_insertion_point(destructor:proto.positioning.CylinderSearchSubset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CylinderSearchSubset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete z_offset_;
}

void CylinderSearchSubset::ArenaDtor(void* object) {
  CylinderSearchSubset* _this = reinterpret_cast< CylinderSearchSubset* >(object);
  (void)_this;
}
void CylinderSearchSubset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CylinderSearchSubset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CylinderSearchSubset& CylinderSearchSubset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CylinderSearchSubset_positioning_2eproto.base);
  return *internal_default_instance();
}


void CylinderSearchSubset::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.positioning.CylinderSearchSubset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  if (GetArena() == nullptr && z_offset_ != nullptr) {
    delete z_offset_;
  }
  z_offset_ = nullptr;
  radius_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CylinderSearchSubset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto.positioning.GeoLocation3D center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue z_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_z_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CylinderSearchSubset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.positioning.CylinderSearchSubset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.positioning.GeoLocation3D center = 1;
  if (this->has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  // float radius = 2;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_radius(), target);
  }

  // .google.protobuf.FloatValue z_offset = 3;
  if (this->has_z_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::z_offset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.positioning.CylinderSearchSubset)
  return target;
}

size_t CylinderSearchSubset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.positioning.CylinderSearchSubset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.positioning.GeoLocation3D center = 1;
  if (this->has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // .google.protobuf.FloatValue z_offset = 3;
  if (this->has_z_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *z_offset_);
  }

  // float radius = 2;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CylinderSearchSubset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.positioning.CylinderSearchSubset)
  GOOGLE_DCHECK_NE(&from, this);
  const CylinderSearchSubset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CylinderSearchSubset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.positioning.CylinderSearchSubset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.positioning.CylinderSearchSubset)
    MergeFrom(*source);
  }
}

void CylinderSearchSubset::MergeFrom(const CylinderSearchSubset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.positioning.CylinderSearchSubset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center()) {
    _internal_mutable_center()->::proto::positioning::GeoLocation3D::MergeFrom(from._internal_center());
  }
  if (from.has_z_offset()) {
    _internal_mutable_z_offset()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_z_offset());
  }
  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
}

void CylinderSearchSubset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.positioning.CylinderSearchSubset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CylinderSearchSubset::CopyFrom(const CylinderSearchSubset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.positioning.CylinderSearchSubset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CylinderSearchSubset::IsInitialized() const {
  return true;
}

void CylinderSearchSubset::InternalSwap(CylinderSearchSubset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CylinderSearchSubset, radius_)
      + sizeof(CylinderSearchSubset::radius_)
      - PROTOBUF_FIELD_OFFSET(CylinderSearchSubset, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CylinderSearchSubset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WifiNetworkMeasurement::InitAsDefaultInstance() {
}
class WifiNetworkMeasurement::_Internal {
 public:
};

WifiNetworkMeasurement::WifiNetworkMeasurement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.positioning.WifiNetworkMeasurement)
}
WifiNetworkMeasurement::WifiNetworkMeasurement(const WifiNetworkMeasurement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mac_address().empty()) {
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mac_address(),
      GetArena());
  }
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssid().empty()) {
    ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ssid(),
      GetArena());
  }
  ::memcpy(&frequency_mhz_, &from.frequency_mhz_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_db_) -
    reinterpret_cast<char*>(&frequency_mhz_)) + sizeof(level_db_));
  // @@protoc_insertion_point(copy_constructor:proto.positioning.WifiNetworkMeasurement)
}

void WifiNetworkMeasurement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WifiNetworkMeasurement_positioning_2eproto.base);
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&frequency_mhz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_db_) -
      reinterpret_cast<char*>(&frequency_mhz_)) + sizeof(level_db_));
}

WifiNetworkMeasurement::~WifiNetworkMeasurement() {
  // @@protoc_insertion_point(destructor:proto.positioning.WifiNetworkMeasurement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WifiNetworkMeasurement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ssid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WifiNetworkMeasurement::ArenaDtor(void* object) {
  WifiNetworkMeasurement* _this = reinterpret_cast< WifiNetworkMeasurement* >(object);
  (void)_this;
}
void WifiNetworkMeasurement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WifiNetworkMeasurement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WifiNetworkMeasurement& WifiNetworkMeasurement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WifiNetworkMeasurement_positioning_2eproto.base);
  return *internal_default_instance();
}


void WifiNetworkMeasurement::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.positioning.WifiNetworkMeasurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mac_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ssid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&frequency_mhz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_db_) -
      reinterpret_cast<char*>(&frequency_mhz_)) + sizeof(level_db_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WifiNetworkMeasurement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mac_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mac_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.positioning.WifiNetworkMeasurement.mac_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 frequency_mhz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frequency_mhz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level_db = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          level_db_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ssid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ssid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.positioning.WifiNetworkMeasurement.ssid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WifiNetworkMeasurement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.positioning.WifiNetworkMeasurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mac_address = 1;
  if (this->mac_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac_address().data(), static_cast<int>(this->_internal_mac_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.positioning.WifiNetworkMeasurement.mac_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mac_address(), target);
  }

  // int32 frequency_mhz = 2;
  if (this->frequency_mhz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_frequency_mhz(), target);
  }

  // int32 level_db = 3;
  if (this->level_db() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_level_db(), target);
  }

  // string ssid = 4;
  if (this->ssid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.positioning.WifiNetworkMeasurement.ssid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ssid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.positioning.WifiNetworkMeasurement)
  return target;
}

size_t WifiNetworkMeasurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.positioning.WifiNetworkMeasurement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mac_address = 1;
  if (this->mac_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac_address());
  }

  // string ssid = 4;
  if (this->ssid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // int32 frequency_mhz = 2;
  if (this->frequency_mhz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frequency_mhz());
  }

  // int32 level_db = 3;
  if (this->level_db() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level_db());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WifiNetworkMeasurement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.positioning.WifiNetworkMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  const WifiNetworkMeasurement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WifiNetworkMeasurement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.positioning.WifiNetworkMeasurement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.positioning.WifiNetworkMeasurement)
    MergeFrom(*source);
  }
}

void WifiNetworkMeasurement::MergeFrom(const WifiNetworkMeasurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.positioning.WifiNetworkMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mac_address().size() > 0) {
    _internal_set_mac_address(from._internal_mac_address());
  }
  if (from.ssid().size() > 0) {
    _internal_set_ssid(from._internal_ssid());
  }
  if (from.frequency_mhz() != 0) {
    _internal_set_frequency_mhz(from._internal_frequency_mhz());
  }
  if (from.level_db() != 0) {
    _internal_set_level_db(from._internal_level_db());
  }
}

void WifiNetworkMeasurement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.positioning.WifiNetworkMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WifiNetworkMeasurement::CopyFrom(const WifiNetworkMeasurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.positioning.WifiNetworkMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiNetworkMeasurement::IsInitialized() const {
  return true;
}

void WifiNetworkMeasurement::InternalSwap(WifiNetworkMeasurement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mac_address_.Swap(&other->mac_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ssid_.Swap(&other->ssid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WifiNetworkMeasurement, level_db_)
      + sizeof(WifiNetworkMeasurement::level_db_)
      - PROTOBUF_FIELD_OFFSET(WifiNetworkMeasurement, frequency_mhz_)>(
          reinterpret_cast<char*>(&frequency_mhz_),
          reinterpret_cast<char*>(&other->frequency_mhz_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WifiNetworkMeasurement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BluetoothMeasurement::InitAsDefaultInstance() {
}
class BluetoothMeasurement::_Internal {
 public:
};

BluetoothMeasurement::BluetoothMeasurement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.positioning.BluetoothMeasurement)
}
BluetoothMeasurement::BluetoothMeasurement(const BluetoothMeasurement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mac_address().empty()) {
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mac_address(),
      GetArena());
  }
  level_db_ = from.level_db_;
  // @@protoc_insertion_point(copy_constructor:proto.positioning.BluetoothMeasurement)
}

void BluetoothMeasurement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BluetoothMeasurement_positioning_2eproto.base);
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  level_db_ = 0;
}

BluetoothMeasurement::~BluetoothMeasurement() {
  // @@protoc_insertion_point(destructor:proto.positioning.BluetoothMeasurement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BluetoothMeasurement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BluetoothMeasurement::ArenaDtor(void* object) {
  BluetoothMeasurement* _this = reinterpret_cast< BluetoothMeasurement* >(object);
  (void)_this;
}
void BluetoothMeasurement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BluetoothMeasurement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BluetoothMeasurement& BluetoothMeasurement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BluetoothMeasurement_positioning_2eproto.base);
  return *internal_default_instance();
}


void BluetoothMeasurement::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.positioning.BluetoothMeasurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mac_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  level_db_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BluetoothMeasurement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mac_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mac_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.positioning.BluetoothMeasurement.mac_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level_db = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_db_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BluetoothMeasurement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.positioning.BluetoothMeasurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mac_address = 1;
  if (this->mac_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac_address().data(), static_cast<int>(this->_internal_mac_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.positioning.BluetoothMeasurement.mac_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mac_address(), target);
  }

  // int32 level_db = 2;
  if (this->level_db() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level_db(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.positioning.BluetoothMeasurement)
  return target;
}

size_t BluetoothMeasurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.positioning.BluetoothMeasurement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mac_address = 1;
  if (this->mac_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac_address());
  }

  // int32 level_db = 2;
  if (this->level_db() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level_db());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BluetoothMeasurement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.positioning.BluetoothMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  const BluetoothMeasurement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BluetoothMeasurement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.positioning.BluetoothMeasurement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.positioning.BluetoothMeasurement)
    MergeFrom(*source);
  }
}

void BluetoothMeasurement::MergeFrom(const BluetoothMeasurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.positioning.BluetoothMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mac_address().size() > 0) {
    _internal_set_mac_address(from._internal_mac_address());
  }
  if (from.level_db() != 0) {
    _internal_set_level_db(from._internal_level_db());
  }
}

void BluetoothMeasurement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.positioning.BluetoothMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BluetoothMeasurement::CopyFrom(const BluetoothMeasurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.positioning.BluetoothMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BluetoothMeasurement::IsInitialized() const {
  return true;
}

void BluetoothMeasurement::InternalSwap(BluetoothMeasurement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mac_address_.Swap(&other->mac_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(level_db_, other->level_db_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BluetoothMeasurement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraIntrinsics::InitAsDefaultInstance() {
}
class CameraIntrinsics::_Internal {
 public:
};

CameraIntrinsics::CameraIntrinsics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.positioning.CameraIntrinsics)
}
CameraIntrinsics::CameraIntrinsics(const CameraIntrinsics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fx_, &from.fx_,
    static_cast<size_t>(reinterpret_cast<char*>(&py_) -
    reinterpret_cast<char*>(&fx_)) + sizeof(py_));
  // @@protoc_insertion_point(copy_constructor:proto.positioning.CameraIntrinsics)
}

void CameraIntrinsics::SharedCtor() {
  ::memset(&fx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&py_) -
      reinterpret_cast<char*>(&fx_)) + sizeof(py_));
}

CameraIntrinsics::~CameraIntrinsics() {
  // @@protoc_insertion_point(destructor:proto.positioning.CameraIntrinsics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraIntrinsics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CameraIntrinsics::ArenaDtor(void* object) {
  CameraIntrinsics* _this = reinterpret_cast< CameraIntrinsics* >(object);
  (void)_this;
}
void CameraIntrinsics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraIntrinsics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraIntrinsics& CameraIntrinsics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraIntrinsics_positioning_2eproto.base);
  return *internal_default_instance();
}


void CameraIntrinsics::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.positioning.CameraIntrinsics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&py_) -
      reinterpret_cast<char*>(&fx_)) + sizeof(py_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraIntrinsics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float fx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          fx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          fy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float px = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          px_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float py = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          py_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraIntrinsics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.positioning.CameraIntrinsics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float fx = 1;
  if (!(this->fx() <= 0 && this->fx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_fx(), target);
  }

  // float fy = 2;
  if (!(this->fy() <= 0 && this->fy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fy(), target);
  }

  // float px = 3;
  if (!(this->px() <= 0 && this->px() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_px(), target);
  }

  // float py = 4;
  if (!(this->py() <= 0 && this->py() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_py(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.positioning.CameraIntrinsics)
  return target;
}

size_t CameraIntrinsics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.positioning.CameraIntrinsics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float fx = 1;
  if (!(this->fx() <= 0 && this->fx() >= 0)) {
    total_size += 1 + 4;
  }

  // float fy = 2;
  if (!(this->fy() <= 0 && this->fy() >= 0)) {
    total_size += 1 + 4;
  }

  // float px = 3;
  if (!(this->px() <= 0 && this->px() >= 0)) {
    total_size += 1 + 4;
  }

  // float py = 4;
  if (!(this->py() <= 0 && this->py() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraIntrinsics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.positioning.CameraIntrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraIntrinsics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraIntrinsics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.positioning.CameraIntrinsics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.positioning.CameraIntrinsics)
    MergeFrom(*source);
  }
}

void CameraIntrinsics::MergeFrom(const CameraIntrinsics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.positioning.CameraIntrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.fx() <= 0 && from.fx() >= 0)) {
    _internal_set_fx(from._internal_fx());
  }
  if (!(from.fy() <= 0 && from.fy() >= 0)) {
    _internal_set_fy(from._internal_fy());
  }
  if (!(from.px() <= 0 && from.px() >= 0)) {
    _internal_set_px(from._internal_px());
  }
  if (!(from.py() <= 0 && from.py() >= 0)) {
    _internal_set_py(from._internal_py());
  }
}

void CameraIntrinsics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.positioning.CameraIntrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraIntrinsics::CopyFrom(const CameraIntrinsics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.positioning.CameraIntrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraIntrinsics::IsInitialized() const {
  return true;
}

void CameraIntrinsics::InternalSwap(CameraIntrinsics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraIntrinsics, py_)
      + sizeof(CameraIntrinsics::py_)
      - PROTOBUF_FIELD_OFFSET(CameraIntrinsics, fx_)>(
          reinterpret_cast<char*>(&fx_),
          reinterpret_cast<char*>(&other->fx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraIntrinsics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VisualMeasurement::InitAsDefaultInstance() {
  ::proto::positioning::_VisualMeasurement_default_instance_._instance.get_mutable()->camera_intrinsics_ = const_cast< ::proto::positioning::CameraIntrinsics*>(
      ::proto::positioning::CameraIntrinsics::internal_default_instance());
  ::proto::positioning::_VisualMeasurement_default_instance_._instance.get_mutable()->relative_camera_pose_ = const_cast< ::proto::positioning::CartesianPose*>(
      ::proto::positioning::CartesianPose::internal_default_instance());
}
class VisualMeasurement::_Internal {
 public:
  static const ::proto::positioning::CameraIntrinsics& camera_intrinsics(const VisualMeasurement* msg);
  static const ::proto::positioning::CartesianPose& relative_camera_pose(const VisualMeasurement* msg);
};

const ::proto::positioning::CameraIntrinsics&
VisualMeasurement::_Internal::camera_intrinsics(const VisualMeasurement* msg) {
  return *msg->camera_intrinsics_;
}
const ::proto::positioning::CartesianPose&
VisualMeasurement::_Internal::relative_camera_pose(const VisualMeasurement* msg) {
  return *msg->relative_camera_pose_;
}
VisualMeasurement::VisualMeasurement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.positioning.VisualMeasurement)
}
VisualMeasurement::VisualMeasurement(const VisualMeasurement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  picture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_picture().empty()) {
    picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_picture(),
      GetArena());
  }
  if (from._internal_has_camera_intrinsics()) {
    camera_intrinsics_ = new ::proto::positioning::CameraIntrinsics(*from.camera_intrinsics_);
  } else {
    camera_intrinsics_ = nullptr;
  }
  if (from._internal_has_relative_camera_pose()) {
    relative_camera_pose_ = new ::proto::positioning::CartesianPose(*from.relative_camera_pose_);
  } else {
    relative_camera_pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.positioning.VisualMeasurement)
}

void VisualMeasurement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VisualMeasurement_positioning_2eproto.base);
  picture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&camera_intrinsics_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_camera_pose_) -
      reinterpret_cast<char*>(&camera_intrinsics_)) + sizeof(relative_camera_pose_));
}

VisualMeasurement::~VisualMeasurement() {
  // @@protoc_insertion_point(destructor:proto.positioning.VisualMeasurement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VisualMeasurement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  picture_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete camera_intrinsics_;
  if (this != internal_default_instance()) delete relative_camera_pose_;
}

void VisualMeasurement::ArenaDtor(void* object) {
  VisualMeasurement* _this = reinterpret_cast< VisualMeasurement* >(object);
  (void)_this;
}
void VisualMeasurement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VisualMeasurement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisualMeasurement& VisualMeasurement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisualMeasurement_positioning_2eproto.base);
  return *internal_default_instance();
}


void VisualMeasurement::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.positioning.VisualMeasurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  picture_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && camera_intrinsics_ != nullptr) {
    delete camera_intrinsics_;
  }
  camera_intrinsics_ = nullptr;
  if (GetArena() == nullptr && relative_camera_pose_ != nullptr) {
    delete relative_camera_pose_;
  }
  relative_camera_pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisualMeasurement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes picture = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_picture();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.positioning.CameraIntrinsics camera_intrinsics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_intrinsics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.positioning.CartesianPose relative_camera_pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_relative_camera_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VisualMeasurement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.positioning.VisualMeasurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes picture = 1;
  if (this->picture().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_picture(), target);
  }

  // .proto.positioning.CameraIntrinsics camera_intrinsics = 2;
  if (this->has_camera_intrinsics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::camera_intrinsics(this), target, stream);
  }

  // .proto.positioning.CartesianPose relative_camera_pose = 3;
  if (this->has_relative_camera_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::relative_camera_pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.positioning.VisualMeasurement)
  return target;
}

size_t VisualMeasurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.positioning.VisualMeasurement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes picture = 1;
  if (this->picture().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_picture());
  }

  // .proto.positioning.CameraIntrinsics camera_intrinsics = 2;
  if (this->has_camera_intrinsics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_intrinsics_);
  }

  // .proto.positioning.CartesianPose relative_camera_pose = 3;
  if (this->has_relative_camera_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relative_camera_pose_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisualMeasurement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.positioning.VisualMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  const VisualMeasurement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisualMeasurement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.positioning.VisualMeasurement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.positioning.VisualMeasurement)
    MergeFrom(*source);
  }
}

void VisualMeasurement::MergeFrom(const VisualMeasurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.positioning.VisualMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.picture().size() > 0) {
    _internal_set_picture(from._internal_picture());
  }
  if (from.has_camera_intrinsics()) {
    _internal_mutable_camera_intrinsics()->::proto::positioning::CameraIntrinsics::MergeFrom(from._internal_camera_intrinsics());
  }
  if (from.has_relative_camera_pose()) {
    _internal_mutable_relative_camera_pose()->::proto::positioning::CartesianPose::MergeFrom(from._internal_relative_camera_pose());
  }
}

void VisualMeasurement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.positioning.VisualMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisualMeasurement::CopyFrom(const VisualMeasurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.positioning.VisualMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisualMeasurement::IsInitialized() const {
  return true;
}

void VisualMeasurement::InternalSwap(VisualMeasurement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  picture_.Swap(&other->picture_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisualMeasurement, relative_camera_pose_)
      + sizeof(VisualMeasurement::relative_camera_pose_)
      - PROTOBUF_FIELD_OFFSET(VisualMeasurement, camera_intrinsics_)>(
          reinterpret_cast<char*>(&camera_intrinsics_),
          reinterpret_cast<char*>(&other->camera_intrinsics_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VisualMeasurement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Query::InitAsDefaultInstance() {
}
class Query::_Internal {
 public:
};

void Query::clear_search_subsets() {
  search_subsets_.Clear();
}
Query::Query(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  wifi_measurements_(arena),
  bluetooth_measurements_(arena),
  visual_measurements_(arena),
  search_subsets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.positioning.Query)
}
Query::Query(const Query& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      wifi_measurements_(from.wifi_measurements_),
      bluetooth_measurements_(from.bluetooth_measurements_),
      visual_measurements_(from.visual_measurements_),
      search_subsets_(from.search_subsets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query_id().empty()) {
    query_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_query_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:proto.positioning.Query)
}

void Query::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Query_positioning_2eproto.base);
  query_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:proto.positioning.Query)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Query::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  query_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Query::ArenaDtor(void* object) {
  Query* _this = reinterpret_cast< Query* >(object);
  (void)_this;
}
void Query::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Query& Query::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Query_positioning_2eproto.base);
  return *internal_default_instance();
}


void Query::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.positioning.Query)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wifi_measurements_.Clear();
  bluetooth_measurements_.Clear();
  visual_measurements_.Clear();
  search_subsets_.Clear();
  query_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Query::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.positioning.Query.query_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto.positioning.WifiNetworkMeasurement wifi_measurements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wifi_measurements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .proto.positioning.BluetoothMeasurement bluetooth_measurements = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bluetooth_measurements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .proto.positioning.VisualMeasurement visual_measurements = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_visual_measurements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any search_subsets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_search_subsets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Query::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.positioning.Query)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query_id = 1;
  if (this->query_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query_id().data(), static_cast<int>(this->_internal_query_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.positioning.Query.query_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query_id(), target);
  }

  // repeated .proto.positioning.WifiNetworkMeasurement wifi_measurements = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_wifi_measurements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_wifi_measurements(i), target, stream);
  }

  // repeated .proto.positioning.BluetoothMeasurement bluetooth_measurements = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bluetooth_measurements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_bluetooth_measurements(i), target, stream);
  }

  // repeated .proto.positioning.VisualMeasurement visual_measurements = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_visual_measurements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_visual_measurements(i), target, stream);
  }

  // repeated .google.protobuf.Any search_subsets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_search_subsets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_search_subsets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.positioning.Query)
  return target;
}

size_t Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.positioning.Query)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.positioning.WifiNetworkMeasurement wifi_measurements = 2;
  total_size += 1UL * this->_internal_wifi_measurements_size();
  for (const auto& msg : this->wifi_measurements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.positioning.BluetoothMeasurement bluetooth_measurements = 3;
  total_size += 1UL * this->_internal_bluetooth_measurements_size();
  for (const auto& msg : this->bluetooth_measurements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.positioning.VisualMeasurement visual_measurements = 4;
  total_size += 1UL * this->_internal_visual_measurements_size();
  for (const auto& msg : this->visual_measurements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Any search_subsets = 5;
  total_size += 1UL * this->_internal_search_subsets_size();
  for (const auto& msg : this->search_subsets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string query_id = 1;
  if (this->query_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Query::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.positioning.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const Query* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Query>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.positioning.Query)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.positioning.Query)
    MergeFrom(*source);
  }
}

void Query::MergeFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.positioning.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wifi_measurements_.MergeFrom(from.wifi_measurements_);
  bluetooth_measurements_.MergeFrom(from.bluetooth_measurements_);
  visual_measurements_.MergeFrom(from.visual_measurements_);
  search_subsets_.MergeFrom(from.search_subsets_);
  if (from.query_id().size() > 0) {
    _internal_set_query_id(from._internal_query_id());
  }
}

void Query::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.positioning.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query::CopyFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.positioning.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {
  return true;
}

void Query::InternalSwap(Query* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  wifi_measurements_.InternalSwap(&other->wifi_measurements_);
  bluetooth_measurements_.InternalSwap(&other->bluetooth_measurements_);
  visual_measurements_.InternalSwap(&other->visual_measurements_);
  search_subsets_.InternalSwap(&other->search_subsets_);
  query_id_.Swap(&other->query_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Query::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PoseEstimate::InitAsDefaultInstance() {
  ::proto::positioning::_PoseEstimate_default_instance_._instance.get_mutable()->geo_pose_ = const_cast< ::proto::positioning::GeoPose*>(
      ::proto::positioning::GeoPose::internal_default_instance());
  ::proto::positioning::_PoseEstimate_default_instance_._instance.get_mutable()->site_pose_ = const_cast< ::proto::positioning::CartesianPose*>(
      ::proto::positioning::CartesianPose::internal_default_instance());
}
class PoseEstimate::_Internal {
 public:
  static const ::proto::positioning::GeoPose& geo_pose(const PoseEstimate* msg);
  static const ::proto::positioning::CartesianPose& site_pose(const PoseEstimate* msg);
};

const ::proto::positioning::GeoPose&
PoseEstimate::_Internal::geo_pose(const PoseEstimate* msg) {
  return *msg->geo_pose_;
}
const ::proto::positioning::CartesianPose&
PoseEstimate::_Internal::site_pose(const PoseEstimate* msg) {
  return *msg->site_pose_;
}
PoseEstimate::PoseEstimate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.positioning.PoseEstimate)
}
PoseEstimate::PoseEstimate(const PoseEstimate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_geo_pose()) {
    geo_pose_ = new ::proto::positioning::GeoPose(*from.geo_pose_);
  } else {
    geo_pose_ = nullptr;
  }
  if (from._internal_has_site_pose()) {
    site_pose_ = new ::proto::positioning::CartesianPose(*from.site_pose_);
  } else {
    site_pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.positioning.PoseEstimate)
}

void PoseEstimate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PoseEstimate_positioning_2eproto.base);
  ::memset(&geo_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&site_pose_) -
      reinterpret_cast<char*>(&geo_pose_)) + sizeof(site_pose_));
}

PoseEstimate::~PoseEstimate() {
  // @@protoc_insertion_point(destructor:proto.positioning.PoseEstimate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PoseEstimate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete geo_pose_;
  if (this != internal_default_instance()) delete site_pose_;
}

void PoseEstimate::ArenaDtor(void* object) {
  PoseEstimate* _this = reinterpret_cast< PoseEstimate* >(object);
  (void)_this;
}
void PoseEstimate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoseEstimate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoseEstimate& PoseEstimate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoseEstimate_positioning_2eproto.base);
  return *internal_default_instance();
}


void PoseEstimate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.positioning.PoseEstimate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && geo_pose_ != nullptr) {
    delete geo_pose_;
  }
  geo_pose_ = nullptr;
  if (GetArena() == nullptr && site_pose_ != nullptr) {
    delete site_pose_;
  }
  site_pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseEstimate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto.positioning.GeoPose geo_pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.positioning.CartesianPose site_pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_site_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoseEstimate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.positioning.PoseEstimate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.positioning.GeoPose geo_pose = 1;
  if (this->has_geo_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::geo_pose(this), target, stream);
  }

  // .proto.positioning.CartesianPose site_pose = 2;
  if (this->has_site_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::site_pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.positioning.PoseEstimate)
  return target;
}

size_t PoseEstimate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.positioning.PoseEstimate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.positioning.GeoPose geo_pose = 1;
  if (this->has_geo_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geo_pose_);
  }

  // .proto.positioning.CartesianPose site_pose = 2;
  if (this->has_site_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *site_pose_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseEstimate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.positioning.PoseEstimate)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseEstimate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoseEstimate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.positioning.PoseEstimate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.positioning.PoseEstimate)
    MergeFrom(*source);
  }
}

void PoseEstimate::MergeFrom(const PoseEstimate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.positioning.PoseEstimate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_geo_pose()) {
    _internal_mutable_geo_pose()->::proto::positioning::GeoPose::MergeFrom(from._internal_geo_pose());
  }
  if (from.has_site_pose()) {
    _internal_mutable_site_pose()->::proto::positioning::CartesianPose::MergeFrom(from._internal_site_pose());
  }
}

void PoseEstimate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.positioning.PoseEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseEstimate::CopyFrom(const PoseEstimate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.positioning.PoseEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseEstimate::IsInitialized() const {
  return true;
}

void PoseEstimate::InternalSwap(PoseEstimate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoseEstimate, site_pose_)
      + sizeof(PoseEstimate::site_pose_)
      - PROTOBUF_FIELD_OFFSET(PoseEstimate, geo_pose_)>(
          reinterpret_cast<char*>(&geo_pose_),
          reinterpret_cast<char*>(&other->geo_pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseEstimate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Response::InitAsDefaultInstance() {
  ::proto::positioning::_Response_default_instance_._instance.get_mutable()->pose_estimate_ = const_cast< ::proto::positioning::PoseEstimate*>(
      ::proto::positioning::PoseEstimate::internal_default_instance());
}
class Response::_Internal {
 public:
  static const ::proto::positioning::PoseEstimate& pose_estimate(const Response* msg);
};

const ::proto::positioning::PoseEstimate&
Response::_Internal::pose_estimate(const Response* msg) {
  return *msg->pose_estimate_;
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.positioning.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query_id().empty()) {
    query_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_query_id(),
      GetArena());
  }
  if (from._internal_has_pose_estimate()) {
    pose_estimate_ = new ::proto::positioning::PoseEstimate(*from.pose_estimate_);
  } else {
    pose_estimate_ = nullptr;
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:proto.positioning.Response)
}

void Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_positioning_2eproto.base);
  query_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_estimate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&pose_estimate_)) + sizeof(confidence_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:proto.positioning.Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  query_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_estimate_;
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_positioning_2eproto.base);
  return *internal_default_instance();
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.positioning.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && pose_estimate_ != nullptr) {
    delete pose_estimate_;
  }
  pose_estimate_ = nullptr;
  confidence_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.positioning.Response.query_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.positioning.PoseEstimate pose_estimate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_estimate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float confidence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.positioning.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query_id = 1;
  if (this->query_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query_id().data(), static_cast<int>(this->_internal_query_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.positioning.Response.query_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query_id(), target);
  }

  // .proto.positioning.PoseEstimate pose_estimate = 2;
  if (this->has_pose_estimate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pose_estimate(this), target, stream);
  }

  // float confidence = 3;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.positioning.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.positioning.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query_id = 1;
  if (this->query_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query_id());
  }

  // .proto.positioning.PoseEstimate pose_estimate = 2;
  if (this->has_pose_estimate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_estimate_);
  }

  // float confidence = 3;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.positioning.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.positioning.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.positioning.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.positioning.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query_id().size() > 0) {
    _internal_set_query_id(from._internal_query_id());
  }
  if (from.has_pose_estimate()) {
    _internal_mutable_pose_estimate()->::proto::positioning::PoseEstimate::MergeFrom(from._internal_pose_estimate());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
}

void Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.positioning.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.positioning.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  query_id_.Swap(&other->query_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Response, confidence_)
      + sizeof(Response::confidence_)
      - PROTOBUF_FIELD_OFFSET(Response, pose_estimate_)>(
          reinterpret_cast<char*>(&pose_estimate_),
          reinterpret_cast<char*>(&other->pose_estimate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace positioning
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::positioning::CartesianLocation* Arena::CreateMaybeMessage< ::proto::positioning::CartesianLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::positioning::CartesianLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::positioning::GeoLocation3D* Arena::CreateMaybeMessage< ::proto::positioning::GeoLocation3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::positioning::GeoLocation3D >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::positioning::Quaternion* Arena::CreateMaybeMessage< ::proto::positioning::Quaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::positioning::Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::positioning::CartesianPose* Arena::CreateMaybeMessage< ::proto::positioning::CartesianPose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::positioning::CartesianPose >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::positioning::GeoPose* Arena::CreateMaybeMessage< ::proto::positioning::GeoPose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::positioning::GeoPose >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::positioning::PolygonSearchSubset_GeoLocation2D* Arena::CreateMaybeMessage< ::proto::positioning::PolygonSearchSubset_GeoLocation2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::positioning::PolygonSearchSubset_GeoLocation2D >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::positioning::PolygonSearchSubset* Arena::CreateMaybeMessage< ::proto::positioning::PolygonSearchSubset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::positioning::PolygonSearchSubset >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::positioning::CylinderSearchSubset* Arena::CreateMaybeMessage< ::proto::positioning::CylinderSearchSubset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::positioning::CylinderSearchSubset >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::positioning::WifiNetworkMeasurement* Arena::CreateMaybeMessage< ::proto::positioning::WifiNetworkMeasurement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::positioning::WifiNetworkMeasurement >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::positioning::BluetoothMeasurement* Arena::CreateMaybeMessage< ::proto::positioning::BluetoothMeasurement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::positioning::BluetoothMeasurement >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::positioning::CameraIntrinsics* Arena::CreateMaybeMessage< ::proto::positioning::CameraIntrinsics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::positioning::CameraIntrinsics >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::positioning::VisualMeasurement* Arena::CreateMaybeMessage< ::proto::positioning::VisualMeasurement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::positioning::VisualMeasurement >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::positioning::Query* Arena::CreateMaybeMessage< ::proto::positioning::Query >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::positioning::Query >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::positioning::PoseEstimate* Arena::CreateMaybeMessage< ::proto::positioning::PoseEstimate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::positioning::PoseEstimate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::positioning::Response* Arena::CreateMaybeMessage< ::proto::positioning::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::positioning::Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
